{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nexport const getCityCoordinates = async (city, country = '') => {\n  try {\n    const countryCode = country ? getCountryCode(country) : '';\n\n    // Case 1: Country only - get capital\n    if (!city && countryCode) {\n      const capital = await getCountryCapital(countryCode);\n      return searchCityInCountry(capital, countryCode);\n    }\n\n    // Case 2: City + Country search\n    if (city && countryCode) {\n      return searchCityInCountry(city, countryCode);\n    }\n\n    // Case 3: City only - global search\n    if (city) {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\n      const data = await response.json();\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\n      return {\n        lat: data[0].lat,\n        lon: data[0].lon\n      };\n    }\n    throw new Error('INVALID_INPUT');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${countryCode}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\n  const data = await response.json();\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async countryCode => {\n  const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode.toLowerCase()}`);\n  const data = await response.json();\n  if (!data.length || !data[0].capital) {\n    throw new Error('COUNTRY_NOT_FOUND');\n  }\n  return data[0].capital[0];\n};\nexport const getWeatherData = async (lat, lon) => {\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\n  return await response.json();\n};","map":{"version":3,"names":["axios","getCountryCode","API_KEY","BASE_URL","getCityCoordinates","city","country","countryCode","capital","getCountryCapital","searchCityInCountry","response","fetch","encodeURIComponent","process","env","REACT_APP_OPENWEATHER_API_KEY","data","json","length","Error","lat","lon","error","console","toLowerCase","getWeatherData"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  try {\r\n    const countryCode = country ? getCountryCode(country) : '';\r\n    \r\n    // Case 1: Country only - get capital\r\n    if (!city && countryCode) {\r\n      const capital = await getCountryCapital(countryCode);\r\n      return searchCityInCountry(capital, countryCode);\r\n    }\r\n\r\n    // Case 2: City + Country search\r\n    if (city && countryCode) {\r\n      return searchCityInCountry(city, countryCode);\r\n    }\r\n\r\n    // Case 3: City only - global search\r\n    if (city) {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n      return { lat: data[0].lat, lon: data[0].lon };\r\n    }\r\n\r\n    throw new Error('INVALID_INPUT');\r\n\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const response = await fetch(\r\n    `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${countryCode}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (countryCode) => {\r\n  const response = await fetch(\r\n    `https://restcountries.com/v3.1/alpha/${countryCode.toLowerCase()}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  if (!data.length || !data[0].capital) {\r\n    throw new Error('COUNTRY_NOT_FOUND');\r\n  }\r\n  \r\n  return data[0].capital[0];\r\n};\r\n\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n  );\r\n  return await response.json();\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}