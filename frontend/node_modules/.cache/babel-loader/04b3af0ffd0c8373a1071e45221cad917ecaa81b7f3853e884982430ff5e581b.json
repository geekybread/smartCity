{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  city,\n  country\n}) => {\n  _s();\n  const [weather, setWeather] = useState({\n    main: {\n      temp: 'N/A'\n    },\n    weather: [{\n      description: 'N/A'\n    }]\n  });\n  const [notification, setNotification] = useState(null);\n\n  // Fetch city coordinates\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        setNotification(null);\n        const result = await getCityCoordinates(city, country);\n\n        // Show appropriate notification\n        if (country && !result.foundPrecise) {\n          if (result.actualCountry) {\n            setNotification({\n              type: 'info',\n              message: `Couldn't find ${city} in ${country}. Showing ${city}, ${result.actualCountry} instead.`\n            });\n          } else {\n            setNotification({\n              type: 'info',\n              message: `Couldn't find ${city} in ${country}. Showing ${city} globally.`\n            });\n          }\n        }\n        setCenter({\n          lat: result.lat,\n          lng: result.lon\n        });\n        const weatherData = await getWeatherData(result.lat, result.lon);\n        setWeather(weatherData);\n      } catch (error) {\n        if (error.message === 'LOCATION_NOT_FOUND') {\n          setNotification({\n            type: 'error',\n            message: `Could not find ${city}${country ? ` in ${country}` : ''}. Please try another location.`\n          });\n        } else {\n          setNotification({\n            type: 'error',\n            message: 'Failed to load weather data. Please try again later.'\n          });\n        }\n        setWeather({\n          error: true,\n          main: {\n            temp: 'N/A'\n          },\n          weather: [{\n            description: 'Error'\n          }]\n        });\n      }\n    };\n    if (city) fetchCityData();\n  }, [city, country]);\n\n  // Handle map load\n  const onLoad = useCallback(map => {\n    setMap(map);\n  }, []);\n\n  // Handle errors and loading states\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page-container\",\n    children: [notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification-banner ${notification.type}`,\n      children: [notification.message, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNotification(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        },\n        zoom: 13,\n        center: center,\n        onLoad: onLoad,\n        children: showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowTraffic(!showTraffic),\n        className: \"traffic-toggle\",\n        children: showTraffic ? 'Hide Traffic' : 'Show Traffic'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather && weather.main ? `${weather.main.temp}°C, ${weather.weather[0].description}` : (weather === null || weather === void 0 ? void 0 : weather.error) || 'Loading weather data...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"gWDjGImCx+hj2bVPFC5LCZY80V8=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","getCityCoordinates","jsxDEV","_jsxDEV","Map","city","country","_s","weather","setWeather","main","temp","description","notification","setNotification","fetchCityData","result","foundPrecise","actualCountry","type","message","setCenter","lat","lng","lon","weatherData","error","onLoad","map","setMap","loadError","children","fileName","_jsxFileName","lineNumber","columnNumber","isLoaded","className","onClick","mapContainerStyle","width","height","zoom","center","showTraffic","setShowTraffic","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\r\nimport './Map.css';\r\n\r\nconst Map = ({ city, country }) => {\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 'N/A' },\r\n    weather: [{ description: 'N/A' }],\r\n  });\r\n  const [notification, setNotification] = useState(null);\r\n\r\n  // Fetch city coordinates\r\n  useEffect(() => {\r\n    const fetchCityData = async () => {\r\n      try {\r\n        setNotification(null);\r\n        const result = await getCityCoordinates(city, country);\r\n        \r\n        // Show appropriate notification\r\n        if (country && !result.foundPrecise) {\r\n          if (result.actualCountry) {\r\n            setNotification({\r\n              type: 'info',\r\n              message: `Couldn't find ${city} in ${country}. Showing ${city}, ${result.actualCountry} instead.`\r\n            });\r\n          } else {\r\n            setNotification({\r\n              type: 'info', \r\n              message: `Couldn't find ${city} in ${country}. Showing ${city} globally.`\r\n            });\r\n          }\r\n        }\r\n        \r\n        setCenter({ lat: result.lat, lng: result.lon });\r\n        const weatherData = await getWeatherData(result.lat, result.lon);\r\n        setWeather(weatherData);\r\n        \r\n      } catch (error) {\r\n        if (error.message === 'LOCATION_NOT_FOUND') {\r\n          setNotification({\r\n            type: 'error',\r\n            message: `Could not find ${city}${country ? ` in ${country}` : ''}. Please try another location.`\r\n          });\r\n        } else {\r\n          setNotification({\r\n            type: 'error',\r\n            message: 'Failed to load weather data. Please try again later.'\r\n          });\r\n        }\r\n        setWeather({\r\n          error: true,\r\n          main: { temp: 'N/A' },\r\n          weather: [{ description: 'Error' }]\r\n        });\r\n      }\r\n    };\r\n\r\n    if (city) fetchCityData();\r\n  }, [city, country]);\r\n\r\n  // Handle map load\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Handle errors and loading states\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps...</div>;\r\n\r\n  return (\r\n    <div className=\"map-page-container\"> \r\n    {/* Notification Banner */}\r\n    {notification && (\r\n        <div className={`notification-banner ${notification.type}`}>\r\n          {notification.message}\r\n          <button onClick={() => setNotification(null)}>×</button>\r\n        </div>\r\n      )}\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          mapContainerStyle={{ width: '100%', height: '100%' }}\r\n          zoom={13}\r\n          center={center}\r\n          onLoad={onLoad}\r\n        >\r\n          {showTraffic && <TrafficLayer />}\r\n        </GoogleMap>\r\n        <button\r\n          onClick={() => setShowTraffic(!showTraffic)}\r\n          className=\"traffic-toggle\"\r\n        >\r\n          {showTraffic ? 'Hide Traffic' : 'Show Traffic'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"weather-widget\">\r\n        <h2>Weather</h2>\r\n        <p>\r\n          {weather && weather.main\r\n            ? `${weather.main.temp}°C, ${weather.weather[0].description}`\r\n            : weather?.error || 'Loading weather data...'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}