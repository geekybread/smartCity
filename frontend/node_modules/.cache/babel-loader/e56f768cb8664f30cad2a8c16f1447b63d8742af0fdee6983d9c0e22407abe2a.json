{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch weather data\nexport const getWeatherData = async (lat, lon) => {\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n  return response.data;\n};\n\n// Fetch city coordinates\nexport const getCityCoordinates = async location => {\n  try {\n    const [city, country] = location.split(',');\n    const query = country ? `${city},${country}` : city;\n    const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=1&appid=${API_KEY}`);\n    const data = await response.json();\n    if (!data || data.length === 0) {\n      throw new Error('Location not found');\n    }\n    return {\n      lat: data[0].lat,\n      lon: data[0].lon\n    };\n  } catch (error) {\n    console.error('Error in getCityCoordinates:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getWeatherData","lat","lon","response","get","data","getCityCoordinates","location","city","country","split","query","fetch","json","length","Error","error","console"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch weather data\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n  return response.data;\r\n};\r\n\r\n// Fetch city coordinates\r\nexport const getCityCoordinates = async (location) => {\r\n  try {\r\n    const [city, country] = location.split(',');\r\n    const query = country ? `${city},${country}` : city;\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=1&appid=${API_KEY}`\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data || data.length === 0) {\r\n      throw new Error('Location not found');\r\n    }\r\n    \r\n    return {\r\n      lat: data[0].lat,\r\n      lon: data[0].lon\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in getCityCoordinates:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;;AAE1D;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,gBAAgBE,GAAG,QAAQC,GAAG,UAAUJ,OAAO,eAAe,CAAC;EAC3G,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;IAC3C,MAAMC,KAAK,GAAGF,OAAO,GAAG,GAAGD,IAAI,IAAIC,OAAO,EAAE,GAAGD,IAAI;IACnD,MAAML,QAAQ,GAAG,MAAMS,KAAK,CAC1B,mDAAmDD,KAAK,kBAAkBb,OAAO,EACnF,CAAC;IAED,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAI,CAACR,IAAI,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,OAAO;MACLd,GAAG,EAAEI,IAAI,CAAC,CAAC,CAAC,CAACJ,GAAG;MAChBC,GAAG,EAAEG,IAAI,CAAC,CAAC,CAAC,CAACH;IACf,CAAC;EACH,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}