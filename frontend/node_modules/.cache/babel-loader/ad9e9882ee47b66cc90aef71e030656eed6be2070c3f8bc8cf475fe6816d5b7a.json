{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map\\\\MapLoader.js\",\n  _s = $RefreshSig$();\n// src/components/Map/MapLoader.js\nimport React from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer, Polygon, Marker } from '@react-google-maps/api';\nimport { GOOGLE_MAPS_CONFIG } from './configs/maps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapLoader({\n  center,\n  zoom,\n  showTraffic,\n  showZones,\n  showAlerts,\n  accidentZones,\n  selectedZoneId,\n  setSelectedZoneId,\n  alerts,\n  onLoad,\n  onUnmount,\n  mapRef\n}) {\n  _s();\n  // const mapRef = useRef();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: GOOGLE_MAPS_CONFIG.apiKey,\n    libraries: [\n    // spread any existing libs from your config, then add drawing & places\n    ...GOOGLE_MAPS_CONFIG.libraries, 'drawing', 'places']\n  });\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-error\",\n    children: \"Error loading map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-loading\",\n    children: \"Loading Map\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: {\n      width: '100%',\n      height: '100%'\n    },\n    center: center,\n    zoom: zoom,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: {\n      disableDefaultUI: false,\n      gestureHandling: 'greedy',\n      zoomControl: true,\n      mapTypeControl: true,\n      streetViewControl: true,\n      fullscreenControl: true,\n      styles: [{\n        featureType: 'poi',\n        elementType: 'labels',\n        stylers: [{\n          visibility: 'off'\n        }]\n      }]\n    },\n    children: [showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this), showZones && accidentZones.map((zone, i) => {\n      const simplePaths = [{\n        lat: 28.6139,\n        lng: 77.209\n      },\n      // center of New Delhi\n      {\n        lat: 28.6239,\n        lng: 77.209\n      }, {\n        lat: 28.6239,\n        lng: 77.219\n      }, {\n        lat: 28.6139,\n        lng: 77.219\n      }]; // a small square to test\n\n      return /*#__PURE__*/_jsxDEV(Polygon, {\n        paths: simplePaths,\n        options: {\n          fillColor: 'blue',\n          fillOpacity: 0.5,\n          strokeColor: 'black',\n          strokeWeight: 2,\n          zIndex: 9999\n        },\n        onClick: () => {\n          console.log(\"✅ Test polygon clicked\"); // 🔥 This must fire\n        }\n      }, `test-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this);\n    }), showAlerts && alerts.map(a => {\n      const lat = parseFloat(a.latitude);\n      const lng = parseFloat(a.longitude);\n      if (isNaN(lat) || isNaN(lng)) return null;\n      return {\n        id: a.id,\n        position: {\n          lat,\n          lng\n        },\n        title: a.message\n      };\n    }).filter(m => m).map(m => /*#__PURE__*/_jsxDEV(Marker, {\n      position: m.position,\n      title: m.title,\n      icon: \"https://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n    }, m.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(MapLoader, \"Cye17iwlLw61yP2k5hqy29yMy+o=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapLoader;\nvar _c;\n$RefreshReg$(_c, \"MapLoader\");","map":{"version":3,"names":["React","GoogleMap","useLoadScript","TrafficLayer","Polygon","Marker","GOOGLE_MAPS_CONFIG","jsxDEV","_jsxDEV","MapLoader","center","zoom","showTraffic","showZones","showAlerts","accidentZones","selectedZoneId","setSelectedZoneId","alerts","onLoad","onUnmount","mapRef","_s","isLoaded","loadError","googleMapsApiKey","apiKey","libraries","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","width","height","options","disableDefaultUI","gestureHandling","zoomControl","mapTypeControl","streetViewControl","fullscreenControl","styles","featureType","elementType","stylers","visibility","map","zone","i","simplePaths","lat","lng","paths","fillColor","fillOpacity","strokeColor","strokeWeight","zIndex","onClick","console","log","a","parseFloat","latitude","longitude","isNaN","id","position","title","message","filter","m","icon","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map/MapLoader.js"],"sourcesContent":["// src/components/Map/MapLoader.js\r\nimport React from 'react'\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  TrafficLayer,\r\n  Polygon,\r\n  Marker,\r\n} from '@react-google-maps/api'\r\nimport { GOOGLE_MAPS_CONFIG } from './configs/maps'\r\n\r\n\r\nexport default function MapLoader({\r\n  center,\r\n  zoom,\r\n  showTraffic,\r\n  showZones,\r\n  showAlerts,\r\n  accidentZones,\r\n  selectedZoneId,\r\n  setSelectedZoneId,\r\n  alerts,\r\n  onLoad,\r\n  onUnmount,\r\n  mapRef,\r\n}) {\r\n\r\n  // const mapRef = useRef();\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: GOOGLE_MAPS_CONFIG.apiKey,\r\n    libraries: [\r\n      // spread any existing libs from your config, then add drawing & places\r\n      ...GOOGLE_MAPS_CONFIG.libraries,\r\n      'drawing',\r\n      'places'\r\n    ]\r\n  })\r\n\r\n  if (loadError) return <div className=\"map-error\">Error loading map</div>\r\n  if (!isLoaded) return <div className=\"map-loading\">Loading Map…</div>\r\n\r\n  return (\r\n    <GoogleMap\r\n      mapContainerStyle={{ width: '100%', height: '100%' }}\r\n      center={center}\r\n      zoom={zoom}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n      options={{\r\n        disableDefaultUI: false,\r\n        gestureHandling: 'greedy',\r\n        zoomControl: true,\r\n        mapTypeControl: true,\r\n        streetViewControl: true,\r\n        fullscreenControl: true,\r\n        styles: [\r\n          { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] }\r\n        ]\r\n      }}\r\n    >\r\n      {showTraffic && <TrafficLayer />}\r\n\r\n      {/* {showZones &&\r\n        accidentZones.map((zone,i) => {\r\n          console.log(\"Rendering polygon:\", zone.id);\r\n          return(\r\n          <Polygon\r\n            key={zone.id}\r\n            paths={zone.polygon.map(p => ({ lat: +p[0], lng: +p[1] }))}\r\n            options={{\r\n              fillColor: zone.id === selectedZoneId ? 'blue' : 'red',\r\n              fillOpacity: 0.3,\r\n              strokeColor: zone.id === selectedZoneId ? 'blue' : 'red',\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: zone.id === selectedZoneId ? 3 : 1.5,\r\n              zIndex: zone.id === selectedZoneId ? 999 : 1,\r\n            }}\r\n            onClick={() => {\r\n              console.log(\"Polygon clicked:\", zone.id);\r\n              const bounds = new window.google.maps.LatLngBounds();\r\n              zone.polygon.forEach(([lat, lng]) => bounds.extend({ lat: +lat, lng: +lng }));\r\n              if (mapRef?.current) {\r\n                console.log(\"✅ mapRef exists, fitting bounds to zone:\", zone.id);\r\n                mapRef.current.fitBounds(bounds);\r\n              } else {\r\n                console.warn(\"❌ mapRef.current is undefined\");\r\n              }\r\n              setSelectedZoneId(zone.id);\r\n            }}\r\n          />\r\n        )})} */}\r\n\r\n          {showZones && accidentZones.map((zone, i) => {\r\n            const simplePaths = [\r\n              { lat: 28.6139, lng: 77.209 }, // center of New Delhi\r\n              { lat: 28.6239, lng: 77.209 },\r\n              { lat: 28.6239, lng: 77.219 },\r\n              { lat: 28.6139, lng: 77.219 },\r\n            ]; // a small square to test\r\n          \r\n            return (\r\n              <Polygon\r\n                key={`test-${i}`}\r\n                paths={simplePaths}\r\n                options={{\r\n                  fillColor: 'blue',\r\n                  fillOpacity: 0.5,\r\n                  strokeColor: 'black',\r\n                  strokeWeight: 2,\r\n                  zIndex: 9999,\r\n                }}\r\n                onClick={() => {\r\n                  console.log(\"✅ Test polygon clicked\"); // 🔥 This must fire\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n          \r\n\r\n      {showAlerts &&\r\n        alerts\r\n          .map(a => {\r\n            const lat = parseFloat(a.latitude)\r\n            const lng = parseFloat(a.longitude)\r\n            if (isNaN(lat) || isNaN(lng)) return null\r\n            return { id: a.id, position: { lat, lng }, title: a.message }\r\n          })\r\n          .filter(m => m)\r\n          .map(m => (\r\n            <Marker\r\n              key={m.id}\r\n              position={m.position}\r\n              title={m.title}\r\n              icon=\"https://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\r\n            />\r\n          ))}\r\n    </GoogleMap>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}