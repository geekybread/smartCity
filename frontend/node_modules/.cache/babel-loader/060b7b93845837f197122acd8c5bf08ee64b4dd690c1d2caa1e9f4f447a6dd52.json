{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\nimport api from '../../../services/api';\nexport default function useMapData(city, country, user) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [airQuality, setAirQuality] = useState(null);\n  const [feedbacks, setFeedbacks] = useState([]); // All feedback reports\n  const [markers, setMarkers] = useState([]); // Just markers for map\n  const prevSearchRef = useRef('');\n  const updateMarkers = useCallback(data => {\n    const newMarkers = data.map(f => ({\n      id: f.id,\n      position: {\n        lat: typeof f.latitude === 'number' ? f.latitude : parseFloat(f.latitude),\n        lng: typeof f.longitude === 'number' ? f.longitude : parseFloat(f.longitude)\n      },\n      type: f.issue_type || f.issueType,\n      severity: f.severity\n    }));\n    setMarkers(newMarkers);\n  }, []);\n  const fetchData = useCallback(async () => {\n    if (!city && !country) return {\n      center: null,\n      zoom: null\n    };\n    const key = `${city === null || city === void 0 ? void 0 : city.trim().toLowerCase()}|${country === null || country === void 0 ? void 0 : country.trim().toLowerCase()}`;\n    prevSearchRef.current = key;\n    try {\n      const {\n        lat,\n        lon\n      } = await getCityCoordinates(city, country);\n      const weatherData = await getWeatherData(lat, lon);\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\n      setWeather(weatherData);\n      setAirQuality(airQualityData);\n      try {\n        const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\n          headers: user ? {\n            Authorization: `Token ${localStorage.getItem('token')}`\n          } : {}\n        });\n        setFeedbacks(resp.data); // Store all feedbacks\n        updateMarkers(resp.data); // Update markers from the same data\n      } catch (err) {\n        console.error('Feedback fetch failed:', err);\n        setFeedbacks([]);\n        setMarkers([]);\n      }\n      return {\n        center: {\n          lat,\n          lng: lon\n        },\n        zoom: city ? 13 : 6\n      };\n    } catch (error) {\n      console.error('Map data error:', error);\n      let message;\n      switch (error.message) {\n        case 'CITY_NOT_FOUND':\n          message = `${city} not found${country ? ` in ${country}` : ''}`;\n          break;\n        case 'CITY_NOT_IN_COUNTRY':\n          message = `${city} not found in ${country}`;\n          break;\n        case 'COUNTRY_NOT_FOUND':\n          message = `${country} not found`;\n          break;\n        case 'INVALID_COUNTRY':\n          message = `Invalid country: ${country}`;\n          break;\n        default:\n          message = 'Failed to load location data';\n      }\n      return {\n        error: true,\n        message\n      };\n    }\n  }, [city, country, updateMarkers, user]);\n  const addFeedback = async newFeedback => {\n    try {\n      const response = await api.post('/api/feedback/', newFeedback, {\n        headers: {\n          Authorization: `Token ${localStorage.getItem('token')}`\n        }\n      });\n      const newFb = response.data;\n      setFeedbacks(prev => [newFb, ...prev]); // Add to full list\n\n      const newMarker = {\n        id: newFb.id,\n        position: {\n          lat: parseFloat(newFb.latitude),\n          lng: parseFloat(newFb.longitude)\n        },\n        type: newFb.issue_type,\n        severity: newFb.severity\n      };\n      setMarkers(prev => [newMarker, ...prev]); // Add to markers list\n    } catch (err) {\n      console.error('Error submitting feedback:', err);\n    }\n  };\n  return {\n    weather,\n    airQuality,\n    feedbacks,\n    markers,\n    fetchData,\n    addFeedback\n  };\n}\n_s(useMapData, \"xgZMcl2WdxmRZpHlB61d4OFSCd0=\");","map":{"version":3,"names":["useState","useCallback","useRef","getCityCoordinates","getWeatherData","getAirQualityData","api","useMapData","city","country","user","_s","weather","setWeather","airQuality","setAirQuality","feedbacks","setFeedbacks","markers","setMarkers","prevSearchRef","updateMarkers","data","newMarkers","map","f","id","position","lat","latitude","parseFloat","lng","longitude","type","issue_type","issueType","severity","fetchData","center","zoom","key","trim","toLowerCase","current","lon","weatherData","airQualityData","catch","resp","get","encodeURIComponent","headers","Authorization","localStorage","getItem","err","console","error","message","addFeedback","newFeedback","response","post","newFb","prev","newMarker"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map/hooks/useMapData.js"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\r\nimport api from '../../../services/api';\r\n\r\nexport default function useMapData(city, country, user) {\r\n  const [weather, setWeather] = useState(null);\r\n  const [airQuality, setAirQuality] = useState(null);\r\n  const [feedbacks, setFeedbacks] = useState([]);  // All feedback reports\r\n  const [markers, setMarkers] = useState([]);      // Just markers for map\r\n  const prevSearchRef = useRef('');\r\n\r\n  const updateMarkers = useCallback(data => {\r\n    const newMarkers = data.map(f => ({\r\n      id: f.id,\r\n      position: {\r\n        lat: typeof f.latitude === 'number' ? f.latitude : parseFloat(f.latitude),\r\n        lng: typeof f.longitude === 'number' ? f.longitude : parseFloat(f.longitude)\r\n      },\r\n      type: f.issue_type || f.issueType,\r\n      severity: f.severity\r\n    }));\r\n    setMarkers(newMarkers);\r\n  }, []);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (!city && !country) return { center: null, zoom: null };\r\n\r\n    const key = `${city?.trim().toLowerCase()}|${country?.trim().toLowerCase()}`;\r\n    prevSearchRef.current = key;\r\n\r\n    try {\r\n      const { lat, lon } = await getCityCoordinates(city, country);\r\n      const weatherData = await getWeatherData(lat, lon);\r\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\r\n\r\n      setWeather(weatherData);\r\n      setAirQuality(airQualityData);\r\n\r\n      try {\r\n        const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\r\n          headers: user ? { Authorization: `Token ${localStorage.getItem('token')}` } : {}\r\n        });\r\n\r\n        setFeedbacks(resp.data);        // Store all feedbacks\r\n        updateMarkers(resp.data);       // Update markers from the same data\r\n\r\n      } catch (err) {\r\n        console.error('Feedback fetch failed:', err);\r\n        setFeedbacks([]);\r\n        setMarkers([]);\r\n      }\r\n\r\n      return { center: { lat, lng: lon }, zoom: city ? 13 : 6 };\r\n\r\n    } catch (error) {\r\n      console.error('Map data error:', error);\r\n      let message;\r\n      switch (error.message) {\r\n        case 'CITY_NOT_FOUND':\r\n          message = `${city} not found${country ? ` in ${country}` : ''}`;\r\n          break;\r\n        case 'CITY_NOT_IN_COUNTRY':\r\n          message = `${city} not found in ${country}`;\r\n          break;\r\n        case 'COUNTRY_NOT_FOUND':\r\n          message = `${country} not found`;\r\n          break;\r\n        case 'INVALID_COUNTRY':\r\n          message = `Invalid country: ${country}`;\r\n          break;\r\n        default:\r\n          message = 'Failed to load location data';\r\n      }\r\n      return { error: true, message };\r\n    }\r\n  }, [city, country, updateMarkers, user]);\r\n\r\n  const addFeedback = async (newFeedback) => {\r\n    try {\r\n      const response = await api.post('/api/feedback/', newFeedback, {\r\n        headers: { Authorization: `Token ${localStorage.getItem('token')}` }\r\n      });\r\n\r\n      const newFb = response.data;\r\n\r\n      setFeedbacks(prev => [newFb, ...prev]);  // Add to full list\r\n\r\n      const newMarker = {\r\n        id: newFb.id,\r\n        position: {\r\n          lat: parseFloat(newFb.latitude),\r\n          lng: parseFloat(newFb.longitude)\r\n        },\r\n        type: newFb.issue_type,\r\n        severity: newFb.severity\r\n      };\r\n      setMarkers(prev => [newMarker, ...prev]);  // Add to markers list\r\n\r\n    } catch (err) {\r\n      console.error('Error submitting feedback:', err);\r\n    }\r\n  };\r\n\r\n  return { weather, airQuality, feedbacks, markers, fetchData, addFeedback };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}