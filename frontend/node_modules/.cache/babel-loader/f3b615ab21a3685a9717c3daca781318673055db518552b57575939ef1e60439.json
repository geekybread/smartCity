{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\nconst apiKey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || '';\nif (!apiKey) throw new Error('Missing API key configuration');\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '';\nif (!GOOGLE_API_KEY) throw new Error('Missing Google API key configuration');\nconst token = process.env.REACT_APP_AQICN_API_KEY || '';\nif (!token) throw new Error('Missing AQICN API key configuration');\nconst weatherApi = axios.create({\n  baseURL: 'https://api.openweathermap.org',\n  params: {\n    appid: apiKey\n  },\n  timeout: 10000\n});\nconst countriesApi = axios.create({\n  baseURL: 'https://restcountries.com/v3.1',\n  timeout: 10000\n});\nconst requestCache = new Map();\nexport const getCityCoordinates = async (city, country = '') => {\n  const cacheKey = `coords_${city}_${country}`;\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n  try {\n    const countryCode = country ? getCountryCode(country) : '';\n    if (country && !countryCode) {\n      throw new Error('INVALID_COUNTRY');\n    }\n    let result;\n    if (!city && countryCode) {\n      const capital = await getCountryCapital(countryCode);\n      result = await searchCityInCountry(capital, countryCode);\n    } else if (city && countryCode) {\n      result = await searchCityInCountry(city, countryCode);\n    } else if (city) {\n      const {\n        data\n      } = await weatherApi.get('/geo/1.0/direct', {\n        params: {\n          q: city,\n          limit: 1\n        }\n      });\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\n      result = {\n        lat: data[0].lat,\n        lon: data[0].lon\n      };\n    } else {\n      throw new Error('INVALID_INPUT');\n    }\n    requestCache.set(cacheKey, result);\n    return result;\n  } catch (error) {\n    requestCache.set(cacheKey, {\n      error: error.message\n    });\n    throw error;\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const {\n    data\n  } = await weatherApi.get('/geo/1.0/direct', {\n    params: {\n      q: `${city},${countryCode}`,\n      limit: 1\n    }\n  });\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async countryCode => {\n  const {\n    data\n  } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\n  if (!data.length || !data[0].capital) {\n    throw new Error('COUNTRY_NOT_FOUND');\n  }\n  return data[0].capital[0];\n};\nexport const getWeatherData = async (lat, lon) => {\n  const {\n    data\n  } = await weatherApi.get('/data/2.5/weather', {\n    params: {\n      lat,\n      lon,\n      units: 'metric'\n    }\n  });\n  return data;\n};\nexport const getAirQualityData = async (lat, lng) => {\n  const url = `https://api.waqi.info/feed/geo:${lat};${lng}/?token=${token}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Failed to fetch AQICN data');\n    const data = await response.json();\n    if (data.status !== 'ok') {\n      throw new Error(data.data || 'Invalid AQICN response');\n    }\n    return processAQICNData(data.data);\n  } catch (error) {\n    console.error('AQICN API error:', error);\n    throw error;\n  }\n};\n\n// New data processor\nconst processAQICNData = data => {\n  var _data$city, _data$city2, _data$time, _data$iaqi, _data$iaqi$pm, _data$iaqi2, _data$iaqi2$pm, _data$iaqi3, _data$iaqi3$o, _data$iaqi4, _data$iaqi4$no, _data$iaqi5, _data$iaqi5$so, _data$iaqi6, _data$iaqi6$co, _data$attribution;\n  return {\n    aqi: data.aqi,\n    station: ((_data$city = data.city) === null || _data$city === void 0 ? void 0 : _data$city.name) || 'Unknown station',\n    url: (_data$city2 = data.city) === null || _data$city2 === void 0 ? void 0 : _data$city2.url,\n    dominentpol: data.dominentpol,\n    time: ((_data$time = data.time) === null || _data$time === void 0 ? void 0 : _data$time.iso) || new Date().toISOString(),\n    pollutants: {\n      pm25: (_data$iaqi = data.iaqi) === null || _data$iaqi === void 0 ? void 0 : (_data$iaqi$pm = _data$iaqi.pm25) === null || _data$iaqi$pm === void 0 ? void 0 : _data$iaqi$pm.v,\n      pm10: (_data$iaqi2 = data.iaqi) === null || _data$iaqi2 === void 0 ? void 0 : (_data$iaqi2$pm = _data$iaqi2.pm10) === null || _data$iaqi2$pm === void 0 ? void 0 : _data$iaqi2$pm.v,\n      o3: (_data$iaqi3 = data.iaqi) === null || _data$iaqi3 === void 0 ? void 0 : (_data$iaqi3$o = _data$iaqi3.o3) === null || _data$iaqi3$o === void 0 ? void 0 : _data$iaqi3$o.v,\n      no2: (_data$iaqi4 = data.iaqi) === null || _data$iaqi4 === void 0 ? void 0 : (_data$iaqi4$no = _data$iaqi4.no2) === null || _data$iaqi4$no === void 0 ? void 0 : _data$iaqi4$no.v,\n      so2: (_data$iaqi5 = data.iaqi) === null || _data$iaqi5 === void 0 ? void 0 : (_data$iaqi5$so = _data$iaqi5.so2) === null || _data$iaqi5$so === void 0 ? void 0 : _data$iaqi5$so.v,\n      co: (_data$iaqi6 = data.iaqi) === null || _data$iaqi6 === void 0 ? void 0 : (_data$iaqi6$co = _data$iaqi6.co) === null || _data$iaqi6$co === void 0 ? void 0 : _data$iaqi6$co.v\n    },\n    attribution: ((_data$attribution = data.attribution) === null || _data$attribution === void 0 ? void 0 : _data$attribution.map(attr => ({\n      name: attr.name,\n      url: attr.url\n    }))) || []\n  };\n};","map":{"version":3,"names":["axios","getCountryCode","apiKey","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","Error","GOOGLE_API_KEY","REACT_APP_GOOGLE_MAPS_API_KEY","token","REACT_APP_AQICN_API_KEY","weatherApi","create","baseURL","params","appid","timeout","countriesApi","requestCache","Map","getCityCoordinates","city","country","cacheKey","has","get","countryCode","result","capital","getCountryCapital","searchCityInCountry","data","q","limit","length","lat","lon","set","error","message","toLowerCase","getWeatherData","units","getAirQualityData","lng","url","response","fetch","ok","json","status","processAQICNData","console","_data$city","_data$city2","_data$time","_data$iaqi","_data$iaqi$pm","_data$iaqi2","_data$iaqi2$pm","_data$iaqi3","_data$iaqi3$o","_data$iaqi4","_data$iaqi4$no","_data$iaqi5","_data$iaqi5$so","_data$iaqi6","_data$iaqi6$co","_data$attribution","aqi","station","name","dominentpol","time","iso","Date","toISOString","pollutants","pm25","iaqi","v","pm10","o3","no2","so2","co","attribution","map","attr"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\nconst apiKey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || '';\r\n\r\nif (!apiKey) throw new Error('Missing API key configuration');\r\n\r\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '';\r\n\r\nif (!GOOGLE_API_KEY) throw new Error('Missing Google API key configuration');\r\n\r\nconst token = process.env.REACT_APP_AQICN_API_KEY || '';\r\nif (!token) throw new Error('Missing AQICN API key configuration');\r\n\r\nconst weatherApi = axios.create({\r\n  baseURL: 'https://api.openweathermap.org',\r\n  params: {\r\n    appid: apiKey\r\n  },\r\n  timeout: 10000\r\n});\r\n\r\nconst countriesApi = axios.create({\r\n  baseURL: 'https://restcountries.com/v3.1',\r\n  timeout: 10000\r\n});\r\n\r\nconst requestCache = new Map();\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  const cacheKey = `coords_${city}_${country}`;\r\n  \r\n  if (requestCache.has(cacheKey)) {\r\n    return requestCache.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const countryCode = country ? getCountryCode(country) : '';\r\n    \r\n    if (country && !countryCode) {\r\n      throw new Error('INVALID_COUNTRY');\r\n    }\r\n\r\n    let result;\r\n    \r\n    if (!city && countryCode) {\r\n      const capital = await getCountryCapital(countryCode);\r\n      result = await searchCityInCountry(capital, countryCode);\r\n    } else if (city && countryCode) {\r\n      result = await searchCityInCountry(city, countryCode);\r\n    } else if (city) {\r\n      const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n        params: { q: city, limit: 1 }\r\n      });\r\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n      result = { lat: data[0].lat, lon: data[0].lon };\r\n    } else {\r\n      throw new Error('INVALID_INPUT');\r\n    }\r\n\r\n    requestCache.set(cacheKey, result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    requestCache.set(cacheKey, { error: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n    params: { q: `${city},${countryCode}`, limit: 1 }\r\n  });\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (countryCode) => {\r\n  const { data } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\r\n  \r\n  if (!data.length || !data[0].capital) {\r\n    throw new Error('COUNTRY_NOT_FOUND');\r\n  }\r\n  \r\n  return data[0].capital[0];\r\n};\r\n\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const { data } = await weatherApi.get('/data/2.5/weather', {\r\n    params: { lat, lon, units: 'metric' }\r\n  });\r\n  return data;\r\n};\r\n\r\n\r\nexport const getAirQualityData = async (lat, lng) => {  \r\n  const url = `https://api.waqi.info/feed/geo:${lat};${lng}/?token=${token}`;\r\n  \r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error('Failed to fetch AQICN data');\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.status !== 'ok') {\r\n      throw new Error(data.data || 'Invalid AQICN response');\r\n    }\r\n    \r\n    return processAQICNData(data.data);\r\n  } catch (error) {\r\n    console.error('AQICN API error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// New data processor\r\nconst processAQICNData = (data) => {\r\n  return {\r\n    aqi: data.aqi,\r\n    station: data.city?.name || 'Unknown station',\r\n    url: data.city?.url,\r\n    dominentpol: data.dominentpol,\r\n    time: data.time?.iso || new Date().toISOString(),\r\n    pollutants: {\r\n      pm25: data.iaqi?.pm25?.v,\r\n      pm10: data.iaqi?.pm10?.v,\r\n      o3: data.iaqi?.o3?.v,\r\n      no2: data.iaqi?.no2?.v,\r\n      so2: data.iaqi?.so2?.v,\r\n      co: data.iaqi?.co?.v\r\n    },\r\n    attribution: data.attribution?.map(attr => ({\r\n      name: attr.name,\r\n      url: attr.url\r\n    })) || []\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}