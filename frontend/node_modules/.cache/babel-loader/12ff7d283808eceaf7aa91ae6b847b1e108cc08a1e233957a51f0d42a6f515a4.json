{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\n\n// Django backend configuration\nconst djangoAPI = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  // Your Django server\n  timeout: 10000\n});\nconst requestCache = new Map();\n\n/**\r\n * Get city coordinates through Django backend\r\n */\nexport const getCityCoordinates = async (city, country = '') => {\n  const cacheKey = `coords_${city}_${country}`;\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n  try {\n    const countryCode = country ? getCountryCode(country) : '';\n    if (country && !countryCode) {\n      throw new Error('INVALID_COUNTRY');\n    }\n    const {\n      data\n    } = await djangoAPI.get('/geocode/', {\n      params: {\n        city,\n        country: countryCode || undefined\n      }\n    });\n    requestCache.set(cacheKey, data);\n    return data;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get country capital through Django backend\r\n */\nexport const getCountryCapital = async countryCode => {\n  try {\n    const {\n      data\n    } = await djangoAPI.get('/country-capital/', {\n      params: {\n        country_code: countryCode.toLowerCase()\n      }\n    });\n    return data.capital;\n  } catch (error) {\n    console.error('Country capital error:', error);\n    throw new Error('Failed to fetch country capital');\n  }\n};\n\n/**\r\n * Get weather data through Django backend\r\n */\nexport const getWeatherData = async (lat, lon) => {\n  const cacheKey = `weather_${lat}_${lon}`;\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n  try {\n    const {\n      data\n    } = await djangoAPI.get('/weather/', {\n      params: {\n        lat,\n        lon\n      }\n    });\n    requestCache.set(cacheKey, data);\n    return data;\n  } catch (error) {\n    console.error('Weather data error:', error);\n    throw new Error('Failed to fetch weather data');\n  }\n};\n\n/**\r\n * Get air quality data through Django backend\r\n */\nexport const getAirQualityData = async (lat, lon) => {\n  const cacheKey = `air_${lat}_${lon}`;\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n  try {\n    const {\n      data\n    } = await djangoAPI.get('/air-pollution/', {\n      params: {\n        lat,\n        lon\n      }\n    });\n    requestCache.set(cacheKey, data);\n    return data;\n  } catch (error) {\n    console.error('Air quality error:', error);\n    throw new Error('Failed to fetch air quality data');\n  }\n};","map":{"version":3,"names":["axios","getCountryCode","djangoAPI","create","baseURL","timeout","requestCache","Map","getCityCoordinates","city","country","cacheKey","has","get","countryCode","Error","data","params","undefined","set","error","console","getCountryCapital","country_code","toLowerCase","capital","getWeatherData","lat","lon","getAirQualityData"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\n// Django backend configuration\r\nconst djangoAPI = axios.create({\r\n  baseURL: 'http://localhost:8000/api', // Your Django server\r\n  timeout: 10000\r\n});\r\n\r\nconst requestCache = new Map();\r\n\r\n/**\r\n * Get city coordinates through Django backend\r\n */\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  const cacheKey = `coords_${city}_${country}`;\r\n  \r\n  if (requestCache.has(cacheKey)) {\r\n    return requestCache.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const countryCode = country ? getCountryCode(country) : '';\r\n    \r\n    if (country && !countryCode) {\r\n      throw new Error('INVALID_COUNTRY');\r\n    }\r\n\r\n    const { data } = await djangoAPI.get('/geocode/', {\r\n      params: { \r\n        city,\r\n        country: countryCode || undefined\r\n      }\r\n    });\r\n\r\n    requestCache.set(cacheKey, data);\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get country capital through Django backend\r\n */\r\nexport const getCountryCapital = async (countryCode) => {\r\n  try {\r\n    const { data } = await djangoAPI.get('/country-capital/', {\r\n      params: { country_code: countryCode.toLowerCase() }\r\n    });\r\n    return data.capital;\r\n  } catch (error) {\r\n    console.error('Country capital error:', error);\r\n    throw new Error('Failed to fetch country capital');\r\n  }\r\n};\r\n\r\n/**\r\n * Get weather data through Django backend\r\n */\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const cacheKey = `weather_${lat}_${lon}`;\r\n  \r\n  if (requestCache.has(cacheKey)) {\r\n    return requestCache.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const { data } = await djangoAPI.get('/weather/', {\r\n      params: { lat, lon }\r\n    });\r\n    \r\n    requestCache.set(cacheKey, data);\r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Weather data error:', error);\r\n    throw new Error('Failed to fetch weather data');\r\n  }\r\n};\r\n\r\n/**\r\n * Get air quality data through Django backend\r\n */\r\nexport const getAirQualityData = async (lat, lon) => {\r\n  const cacheKey = `air_${lat}_${lon}`;\r\n  \r\n  if (requestCache.has(cacheKey)) {\r\n    return requestCache.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const { data } = await djangoAPI.get('/air-pollution/', {\r\n      params: { lat, lon }\r\n    });\r\n    \r\n    requestCache.set(cacheKey, data);\r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Air quality error:', error);\r\n    throw new Error('Failed to fetch air quality data');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}