{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch weather data\nexport const getWeatherData = async (lat, lon) => {\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n  return response.data;\n};\n\n// Fetch city coordinates\nexport const getCityCoordinates = async (locationQuery, country = '') => {\n  try {\n    var _globalData$, _globalData$2;\n    // First try with city+country if country is provided\n    if (country) {\n      var _preciseData$;\n      const fullQuery = `${locationQuery},${country}`;\n      const preciseResponse = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(fullQuery)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\n      const preciseData = await preciseResponse.json();\n      if (preciseData.length > 0 && (_preciseData$ = preciseData[0]) !== null && _preciseData$ !== void 0 && _preciseData$.lat) {\n        return {\n          lat: preciseData[0].lat,\n          lon: preciseData[0].lon,\n          foundPrecise: true\n        };\n      }\n    }\n\n    // Fallback to global city search\n    const globalResponse = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(locationQuery)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\n    const globalData = await globalResponse.json();\n    if (globalData.length === 0 || !((_globalData$ = globalData[0]) !== null && _globalData$ !== void 0 && _globalData$.lat)) {\n      throw new Error('LOCATION_NOT_FOUND');\n    }\n    return {\n      lat: globalData[0].lat,\n      lon: globalData[0].lon,\n      foundPrecise: false,\n      actualCountry: (_globalData$2 = globalData[0]) === null || _globalData$2 === void 0 ? void 0 : _globalData$2.country\n    };\n  } catch (error) {\n    console.error('Error in getCityCoordinates:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getWeatherData","lat","lon","response","get","data","getCityCoordinates","locationQuery","country","_globalData$","_globalData$2","_preciseData$","fullQuery","preciseResponse","fetch","encodeURIComponent","process","env","REACT_APP_OPENWEATHER_API_KEY","preciseData","json","length","foundPrecise","globalResponse","globalData","Error","actualCountry","error","console"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch weather data\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n  return response.data;\r\n};\r\n\r\n// Fetch city coordinates\r\nexport const getCityCoordinates = async (locationQuery, country = '') => {\r\n  try {\r\n    // First try with city+country if country is provided\r\n    if (country) {\r\n      const fullQuery = `${locationQuery},${country}`;\r\n      const preciseResponse = await fetch(\r\n        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(fullQuery)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n      );\r\n      \r\n      const preciseData = await preciseResponse.json();\r\n      \r\n      if (preciseData.length > 0 && preciseData[0]?.lat) {\r\n        return {\r\n          lat: preciseData[0].lat,\r\n          lon: preciseData[0].lon,\r\n          foundPrecise: true\r\n        };\r\n      }\r\n    }\r\n\r\n    // Fallback to global city search\r\n    const globalResponse = await fetch(\r\n      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(locationQuery)}&limit=1&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n    \r\n    const globalData = await globalResponse.json();\r\n    \r\n    if (globalData.length === 0 || !globalData[0]?.lat) {\r\n      throw new Error('LOCATION_NOT_FOUND');\r\n    }\r\n    \r\n    return {\r\n      lat: globalData[0].lat,\r\n      lon: globalData[0].lon,\r\n      foundPrecise: false,\r\n      actualCountry: globalData[0]?.country\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in getCityCoordinates:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;;AAE1D;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,gBAAgBE,GAAG,QAAQC,GAAG,UAAUJ,OAAO,eAAe,CAAC;EAC3G,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,aAAa,EAAEC,OAAO,GAAG,EAAE,KAAK;EACvE,IAAI;IAAA,IAAAC,YAAA,EAAAC,aAAA;IACF;IACA,IAAIF,OAAO,EAAE;MAAA,IAAAG,aAAA;MACX,MAAMC,SAAS,GAAG,GAAGL,aAAa,IAAIC,OAAO,EAAE;MAC/C,MAAMK,eAAe,GAAG,MAAMC,KAAK,CACjC,mDAAmDC,kBAAkB,CAACH,SAAS,CAAC,kBAAkBI,OAAO,CAACC,GAAG,CAACC,6BAA6B,EAC7I,CAAC;MAED,MAAMC,WAAW,GAAG,MAAMN,eAAe,CAACO,IAAI,CAAC,CAAC;MAEhD,IAAID,WAAW,CAACE,MAAM,GAAG,CAAC,KAAAV,aAAA,GAAIQ,WAAW,CAAC,CAAC,CAAC,cAAAR,aAAA,eAAdA,aAAA,CAAgBV,GAAG,EAAE;QACjD,OAAO;UACLA,GAAG,EAAEkB,WAAW,CAAC,CAAC,CAAC,CAAClB,GAAG;UACvBC,GAAG,EAAEiB,WAAW,CAAC,CAAC,CAAC,CAACjB,GAAG;UACvBoB,YAAY,EAAE;QAChB,CAAC;MACH;IACF;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMT,KAAK,CAChC,mDAAmDC,kBAAkB,CAACR,aAAa,CAAC,kBAAkBS,OAAO,CAACC,GAAG,CAACC,6BAA6B,EACjJ,CAAC;IAED,MAAMM,UAAU,GAAG,MAAMD,cAAc,CAACH,IAAI,CAAC,CAAC;IAE9C,IAAII,UAAU,CAACH,MAAM,KAAK,CAAC,IAAI,GAAAZ,YAAA,GAACe,UAAU,CAAC,CAAC,CAAC,cAAAf,YAAA,eAAbA,YAAA,CAAeR,GAAG,GAAE;MAClD,MAAM,IAAIwB,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,OAAO;MACLxB,GAAG,EAAEuB,UAAU,CAAC,CAAC,CAAC,CAACvB,GAAG;MACtBC,GAAG,EAAEsB,UAAU,CAAC,CAAC,CAAC,CAACtB,GAAG;MACtBoB,YAAY,EAAE,KAAK;MACnBI,aAAa,GAAAhB,aAAA,GAAEc,UAAU,CAAC,CAAC,CAAC,cAAAd,aAAA,uBAAbA,aAAA,CAAeF;IAChC,CAAC;EACH,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}