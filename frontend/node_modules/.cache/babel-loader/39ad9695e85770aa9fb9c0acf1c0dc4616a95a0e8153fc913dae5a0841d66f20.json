{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from './utils/countryCodes';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch weather data\nexport const getWeatherData = async (lat, lon) => {\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n  return response.data;\n};\n\n// Fetch city coordinates\n\nexport const getCityCoordinates = async (city, country = '') => {\n  try {\n    const countryCode = getCountryCode(country);\n\n    // Country only - get capital\n    if (!city && country) {\n      if (!countryCode) throw new Error('COUNTRY_NOT_RECOGNIZED');\n      const capital = await getCountryCapital(countryCode);\n      return searchCityInCountry(capital, countryCode);\n    }\n\n    // City + Country search\n    if (city && country) {\n      if (!countryCode) throw new Error('COUNTRY_NOT_RECOGNIZED');\n      return searchCityInCountry(city, countryCode);\n    }\n\n    // City only - global search\n    const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${process.env.API_KEY}`);\n    const data = await response.json();\n    if (!data.length) throw new Error('CITY_NOT_FOUND');\n    return {\n      lat: data[0].lat,\n      lon: data[0].lon\n    };\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${countryCode}&limit=1&appid=${API_KEY}`);\n  const data = await response.json();\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async country => {\n  const response = await fetch(`https://restcountries.com/v3.1/name/${encodeURIComponent(country)}`);\n  const data = await response.json();\n  if (!data.length || !data[0].capital) {\n    throw new Error('COUNTRY_NOT_FOUND');\n  }\n  return data[0].capital[0];\n};","map":{"version":3,"names":["axios","getCountryCode","API_KEY","BASE_URL","getWeatherData","lat","lon","response","get","data","getCityCoordinates","city","country","countryCode","Error","capital","getCountryCapital","searchCityInCountry","fetch","encodeURIComponent","process","env","json","length","error","console"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from './utils/countryCodes';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch weather data\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n  return response.data;\r\n};\r\n\r\n// Fetch city coordinates\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  try {\r\n    const countryCode = getCountryCode(country);\r\n    \r\n    // Country only - get capital\r\n    if (!city && country) {\r\n      if (!countryCode) throw new Error('COUNTRY_NOT_RECOGNIZED');\r\n      const capital = await getCountryCapital(countryCode);\r\n      return searchCityInCountry(capital, countryCode);\r\n    }\r\n\r\n    // City + Country search\r\n    if (city && country) {\r\n      if (!countryCode) throw new Error('COUNTRY_NOT_RECOGNIZED');\r\n      return searchCityInCountry(city, countryCode);\r\n    }\r\n\r\n    // City only - global search\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${process.env.API_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    \r\n    if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n    return { lat: data[0].lat, lon: data[0].lon };\r\n\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const response = await fetch(\r\n    `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${countryCode}&limit=1&appid=${API_KEY}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (country) => {\r\n  const response = await fetch(\r\n    `https://restcountries.com/v3.1/name/${encodeURIComponent(country)}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  if (!data.length || !data[0].capital) {\r\n    throw new Error('COUNTRY_NOT_FOUND');\r\n  }\r\n  \r\n  return data[0].capital[0];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}