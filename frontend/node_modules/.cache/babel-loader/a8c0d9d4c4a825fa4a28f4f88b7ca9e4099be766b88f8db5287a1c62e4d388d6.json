{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  city,\n  country\n}) => {\n  _s();\n  // Now accepts both city and country props\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [weather, setWeather] = useState({\n    main: {\n      temp: 'N/A'\n    },\n    weather: [{\n      description: 'N/A'\n    }]\n  });\n  const [center, setCenter] = useState({\n    lat: 28.70405920,\n    // Default center (Delhi)\n    lng: 77.10249020\n  });\n  const [map, setMap] = useState(null);\n  const [showTraffic, setShowTraffic] = useState(false);\n\n  // Fetch city coordinates and update map center\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        // Combine city and country for the search query\n        const locationQuery = country ? `${city},${country}` : city;\n        const {\n          lat,\n          lon\n        } = await getCityCoordinates(locationQuery);\n        setCenter({\n          lat,\n          lng: lon\n        });\n\n        // Fetch weather data\n        const weatherData = await getWeatherData(lat, lon);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error('Error fetching city data:', error);\n        setWeather({\n          error: 'Failed to load city data',\n          main: {\n            temp: 'N/A'\n          },\n          weather: [{\n            description: 'Error'\n          }]\n        });\n      }\n    };\n    if (city) fetchCityData();\n  }, [city, country]); // Add country to dependency array\n\n  // Handle map load\n  const onLoad = useCallback(map => {\n    setMap(map);\n  }, []);\n\n  // Handle errors and loading states\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        },\n        zoom: 13,\n        center: center,\n        onLoad: onLoad,\n        children: showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowTraffic(!showTraffic),\n        className: \"traffic-toggle\",\n        children: showTraffic ? 'Hide Traffic' : 'Show Traffic'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather && weather.main ? `${weather.main.temp}°C, ${weather.weather[0].description}` : (weather === null || weather === void 0 ? void 0 : weather.error) || 'Loading weather data...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"Kf30dIrMz6sDTrLVmq9KHo1xVJ8=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","getCityCoordinates","jsxDEV","_jsxDEV","Map","city","country","_s","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","weather","setWeather","main","temp","description","center","setCenter","lat","lng","map","setMap","showTraffic","setShowTraffic","fetchCityData","locationQuery","lon","weatherData","error","console","onLoad","children","fileName","_jsxFileName","lineNumber","columnNumber","className","mapContainerStyle","width","height","zoom","onClick","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\r\nimport './Map.css';\r\n\r\nconst Map = ({ city, country }) => {  // Now accepts both city and country props\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 'N/A' },\r\n    weather: [{ description: 'N/A' }],\r\n  });\r\n  const [center, setCenter] = useState({\r\n    lat: 28.70405920,  // Default center (Delhi)\r\n    lng: 77.10249020,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n  const [showTraffic, setShowTraffic] = useState(false);\r\n\r\n  // Fetch city coordinates and update map center\r\n  useEffect(() => {\r\n    const fetchCityData = async () => {\r\n      try {\r\n        // Combine city and country for the search query\r\n        const locationQuery = country ? `${city},${country}` : city;\r\n        const { lat, lon } = await getCityCoordinates(locationQuery);\r\n        setCenter({ lat, lng: lon });\r\n\r\n        // Fetch weather data\r\n        const weatherData = await getWeatherData(lat, lon);\r\n        setWeather(weatherData);\r\n      } catch (error) {\r\n        console.error('Error fetching city data:', error);\r\n        setWeather({ \r\n          error: 'Failed to load city data',\r\n          main: { temp: 'N/A' },\r\n          weather: [{ description: 'Error' }]\r\n        });\r\n      }\r\n    };\r\n\r\n    if (city) fetchCityData();\r\n  }, [city, country]);  // Add country to dependency array\r\n\r\n  // Handle map load\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Handle errors and loading states\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps...</div>;\r\n\r\n  return (\r\n    <div className=\"map-page-container\">\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          mapContainerStyle={{ width: '100%', height: '100%' }}\r\n          zoom={13}\r\n          center={center}\r\n          onLoad={onLoad}\r\n        >\r\n          {showTraffic && <TrafficLayer />}\r\n        </GoogleMap>\r\n        <button\r\n          onClick={() => setShowTraffic(!showTraffic)}\r\n          className=\"traffic-toggle\"\r\n        >\r\n          {showTraffic ? 'Hide Traffic' : 'Show Traffic'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"weather-widget\">\r\n        <h2>Weather</h2>\r\n        <p>\r\n          {weather && weather.main\r\n            ? `${weather.main.temp}°C, ${weather.weather[0].description}`\r\n            : weather?.error || 'Loading weather data...'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}