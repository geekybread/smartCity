{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\n\n// Create Axios instance with common configuration\nconst weatherApi = axios.create({\n  baseURL: 'https://api.openweathermap.org',\n  params: {\n    appid: 'f9293dbeda02be4bda1ce865b2706cb4'\n  }\n});\nconst countriesApi = axios.create({\n  baseURL: 'https://restcountries.com/v3.1'\n});\nexport const getCityCoordinates = async (city, country = '') => {\n  try {\n    const countryCode = country ? getCountryCode(country) : '';\n\n    // Case 1: Country only - get capital\n    if (!city && countryCode) {\n      const capital = await getCountryCapital(countryCode);\n      return searchCityInCountry(capital, countryCode);\n    }\n\n    // Case 2: City + Country search\n    if (city && countryCode) {\n      return searchCityInCountry(city, countryCode);\n    }\n\n    // Case 3: City only - global search\n    if (city) {\n      const {\n        data\n      } = await weatherApi.get('/geo/1.0/direct', {\n        params: {\n          q: city,\n          limit: 1\n        }\n      });\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\n      return {\n        lat: data[0].lat,\n        lon: data[0].lon\n      };\n    }\n    throw new Error('INVALID_INPUT');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const {\n    data\n  } = await weatherApi.get('/geo/1.0/direct', {\n    params: {\n      q: `${city},${countryCode}`,\n      limit: 1\n    }\n  });\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async countryCode => {\n  try {\n    const {\n      data\n    } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\n    if (!data.length || !data[0].capital) {\n      throw new Error('COUNTRY_NOT_FOUND');\n    }\n    return data[0].capital[0];\n  } catch (error) {\n    console.error('Country API error:', error);\n    throw new Error('Failed to fetch country data');\n  }\n};\nexport const getWeatherData = async (lat, lon) => {\n  try {\n    const {\n      data\n    } = await weatherApi.get('/data/2.5/weather', {\n      params: {\n        lat,\n        lon,\n        units: 'metric'\n      }\n    });\n    return data;\n  } catch (error) {\n    console.error('Weather API error:', error);\n    throw new Error('Failed to fetch weather data');\n  }\n};","map":{"version":3,"names":["axios","getCountryCode","weatherApi","create","baseURL","params","appid","countriesApi","getCityCoordinates","city","country","countryCode","capital","getCountryCapital","searchCityInCountry","data","get","q","limit","length","Error","lat","lon","error","console","toLowerCase","getWeatherData","units"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\n\r\n// Create Axios instance with common configuration\r\nconst weatherApi = axios.create({\r\n  baseURL: 'https://api.openweathermap.org',\r\n  params: {\r\n    appid: 'f9293dbeda02be4bda1ce865b2706cb4'\r\n  }\r\n});\r\n\r\nconst countriesApi = axios.create({\r\n  baseURL: 'https://restcountries.com/v3.1'\r\n});\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  try {\r\n    const countryCode = country ? getCountryCode(country) : '';\r\n    \r\n    // Case 1: Country only - get capital\r\n    if (!city && countryCode) {\r\n      const capital = await getCountryCapital(countryCode);\r\n      return searchCityInCountry(capital, countryCode);\r\n    }\r\n\r\n    // Case 2: City + Country search\r\n    if (city && countryCode) {\r\n      return searchCityInCountry(city, countryCode);\r\n    }\r\n\r\n    // Case 3: City only - global search\r\n    if (city) {\r\n      const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n        params: {\r\n          q: city,\r\n          limit: 1\r\n        }\r\n      });\r\n      \r\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n      return { lat: data[0].lat, lon: data[0].lon };\r\n    }\r\n\r\n    throw new Error('INVALID_INPUT');\r\n\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n    params: {\r\n      q: `${city},${countryCode}`,\r\n      limit: 1\r\n    }\r\n  });\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (countryCode) => {\r\n  try {\r\n    const { data } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\r\n    \r\n    if (!data.length || !data[0].capital) {\r\n      throw new Error('COUNTRY_NOT_FOUND');\r\n    }\r\n    \r\n    return data[0].capital[0];\r\n  } catch (error) {\r\n    console.error('Country API error:', error);\r\n    throw new Error('Failed to fetch country data');\r\n  }\r\n};\r\n\r\nexport const getWeatherData = async (lat, lon) => {\r\n  try {\r\n    const { data } = await weatherApi.get('/data/2.5/weather', {\r\n      params: {\r\n        lat,\r\n        lon,\r\n        units: 'metric'\r\n      }\r\n    });\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Weather API error:', error);\r\n    throw new Error('Failed to fetch weather data');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}