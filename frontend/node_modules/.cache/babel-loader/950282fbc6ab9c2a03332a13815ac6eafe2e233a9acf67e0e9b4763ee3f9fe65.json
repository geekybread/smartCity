{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\project_final\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst Map = ({\n  city\n}) => {\n  _s();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [weather, setWeather] = useState({\n    main: {\n      temp: 'N/A'\n    },\n    weather: [{\n      description: 'N/A'\n    }]\n  });\n  const [trafficStatus, setTrafficStatus] = useState('Loading traffic data...');\n  const [center, setCenter] = useState({\n    lat: 25.42012000,\n    // Default center (Prayagraj)\n    lng: -118.24104309082031\n  });\n  const [map, setMap] = useState(null);\n\n  // Fetch city coordinates and update map center\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        const {\n          lat,\n          lon\n        } = await getCityCoordinates(city);\n        setCenter({\n          lat,\n          lng: lon\n        });\n\n        // Fetch weather data for the new city\n        const weatherData = await getWeatherData(lat, lon);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error('Error fetching city data:', error);\n        setWeather({\n          error: 'Failed to load city data'\n        });\n      }\n    };\n    fetchCityData();\n  }, [city]);\n\n  // Handle map load\n  const onLoad = useCallback(map => {\n    setMap(map);\n  }, []);\n\n  // Handle map idle event (when panning or zooming stops)\n  const onIdle = useCallback(() => {\n    if (map) {\n      const bounds = map.getBounds();\n      const center = map.getCenter();\n      console.log('Map Center:', center.lat(), center.lng());\n      console.log('Map Bounds:', bounds.toJSON());\n\n      // Simulate traffic status based on visible area\n      const trafficLevels = ['Low', 'Medium', 'High'];\n      const randomIndex = Math.floor(Math.random() * trafficLevels.length);\n      setTrafficStatus(`Traffic: ${trafficLevels[randomIndex]}`);\n    }\n  }, [map]);\n\n  // Handle errors and loading states\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widgets\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: weather && weather.main ? `${weather.main.temp}°C, ${weather.weather[0].description}` : (weather === null || weather === void 0 ? void 0 : weather.error) || 'Loading weather data...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Traffic Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trafficStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 13,\n      center: center,\n      onLoad: onLoad // Call onLoad when the map loads\n      ,\n      onIdle: onIdle // Call onIdle when the map becomes idle\n      ,\n      children: /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"WH6IOSojgIfDSqlxS+8gQjv8aKI=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","getCityCoordinates","jsxDEV","_jsxDEV","mapContainerStyle","width","height","Map","city","_s","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","weather","setWeather","main","temp","description","trafficStatus","setTrafficStatus","center","setCenter","lat","lng","map","setMap","fetchCityData","lon","weatherData","error","console","onLoad","onIdle","bounds","getBounds","getCenter","log","toJSON","trafficLevels","randomIndex","Math","floor","random","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","zoom","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/project_final/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '400px',\r\n};\r\n\r\nconst Map = ({ city }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 'N/A' },\r\n    weather: [{ description: 'N/A' }],\r\n  });\r\n  const [trafficStatus, setTrafficStatus] = useState('Loading traffic data...');\r\n  const [center, setCenter] = useState({\r\n    lat: 25.42012000,  // Default center (Prayagraj)\r\n    lng: -118.24104309082031,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n\r\n  // Fetch city coordinates and update map center\r\n  useEffect(() => {\r\n    const fetchCityData = async () => {\r\n      try {\r\n        const { lat, lon } = await getCityCoordinates(city);\r\n        setCenter({ lat, lng: lon });\r\n\r\n        // Fetch weather data for the new city\r\n        const weatherData = await getWeatherData(lat, lon);\r\n        setWeather(weatherData);\r\n      } catch (error) {\r\n        console.error('Error fetching city data:', error);\r\n        setWeather({ error: 'Failed to load city data' });\r\n      }\r\n    };\r\n\r\n    fetchCityData();\r\n  }, [city]);\r\n\r\n  // Handle map load\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Handle map idle event (when panning or zooming stops)\r\n  const onIdle = useCallback(() => {\r\n    if (map) {\r\n      const bounds = map.getBounds();\r\n      const center = map.getCenter();\r\n      console.log('Map Center:', center.lat(), center.lng());\r\n      console.log('Map Bounds:', bounds.toJSON());\r\n\r\n      // Simulate traffic status based on visible area\r\n      const trafficLevels = ['Low', 'Medium', 'High'];\r\n      const randomIndex = Math.floor(Math.random() * trafficLevels.length);\r\n      setTrafficStatus(`Traffic: ${trafficLevels[randomIndex]}`);\r\n    }\r\n  }, [map]);\r\n\r\n  // Handle errors and loading states\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps...</div>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"widgets\">\r\n        <div className=\"widget\">\r\n          <h2>Weather</h2>\r\n          <p>\r\n            {weather && weather.main\r\n              ? `${weather.main.temp}°C, ${weather.weather[0].description}`\r\n              : weather?.error || 'Loading weather data...'}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"widget\">\r\n          <h2>Traffic Status</h2>\r\n          <p>{trafficStatus}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={13}\r\n        center={center}\r\n        onLoad={onLoad}  // Call onLoad when the map loads\r\n        onIdle={onIdle}   // Call onIdle when the map becomes idle\r\n      >\r\n        <TrafficLayer />\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}