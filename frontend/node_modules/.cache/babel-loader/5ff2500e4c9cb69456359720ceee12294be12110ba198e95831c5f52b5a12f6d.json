{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\project_final\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData } from '../services/weather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst center = {\n  lat: 34.04924594193164,\n  // Default center (Los Angeles)\n  lng: -118.24104309082031\n};\nconst Map = () => {\n  _s();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [weather, setWeather] = useState(null);\n  const [trafficStatus, setTrafficStatus] = useState('Loading traffic data...');\n  useEffect(() => {\n    // Fetch weather data\n    const fetchWeather = async () => {\n      try {\n        const data = await getWeatherData(center.lat, center.lng);\n        setWeather(data);\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n        setWeather({\n          error: 'Failed to load weather data'\n        });\n      }\n    };\n    fetchWeather();\n  }, []);\n  const getTrafficStatus = map => {\n    // Simulate traffic status based on visible traffic\n    const trafficLevels = ['Low', 'Medium', 'High'];\n    const randomIndex = Math.floor(Math.random() * trafficLevels.length);\n    return trafficLevels[randomIndex];\n  };\n  const onLoad = map => {\n    // Set traffic status when the map loads\n    const status = getTrafficStatus(map);\n    setTrafficStatus(`Traffic: ${status}`);\n  };\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widgets\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: weather ? `${weather.main.temp}°C, ${weather.weather[0].description}` : 'Loading weather data...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Traffic Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trafficStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 13,\n      center: center,\n      onLoad: onLoad // Call onLoad when the map loads\n      ,\n      children: /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"mOz6CzoPjBwTpfeABK8qjwnSVsc=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","jsxDEV","_jsxDEV","mapContainerStyle","width","height","center","lat","lng","Map","_s","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","weather","setWeather","trafficStatus","setTrafficStatus","fetchWeather","data","error","console","getTrafficStatus","map","trafficLevels","randomIndex","Math","floor","random","length","onLoad","status","children","fileName","_jsxFileName","lineNumber","columnNumber","className","main","temp","description","zoom","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/project_final/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData } from '../services/weather';\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '400px',\r\n};\r\n\r\nconst center = {\r\n  lat: 34.04924594193164,  // Default center (Los Angeles)\r\n  lng: -118.24104309082031,\r\n};\r\n\r\nconst Map = () => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  const [weather, setWeather] = useState(null);\r\n  const [trafficStatus, setTrafficStatus] = useState('Loading traffic data...');\r\n\r\n  useEffect(() => {\r\n    // Fetch weather data\r\n    const fetchWeather = async () => {\r\n      try {\r\n        const data = await getWeatherData(center.lat, center.lng);\r\n        setWeather(data);\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n        setWeather({ error: 'Failed to load weather data' });\r\n      }\r\n    };\r\n\r\n    fetchWeather();\r\n  }, []);\r\n\r\n  const getTrafficStatus = (map) => {\r\n    // Simulate traffic status based on visible traffic\r\n    const trafficLevels = ['Low', 'Medium', 'High'];\r\n    const randomIndex = Math.floor(Math.random() * trafficLevels.length);\r\n    return trafficLevels[randomIndex];\r\n  };\r\n\r\n  const onLoad = (map) => {\r\n    // Set traffic status when the map loads\r\n    const status = getTrafficStatus(map);\r\n    setTrafficStatus(`Traffic: ${status}`);\r\n  };\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps...</div>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"widgets\">\r\n        <div className=\"widget\">\r\n          <h2>Weather</h2>\r\n          <p>\r\n            {weather\r\n              ? `${weather.main.temp}°C, ${weather.weather[0].description}`\r\n              : 'Loading weather data...'}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"widget\">\r\n          <h2>Traffic Status</h2>\r\n          <p>{trafficStatus}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={13}\r\n        center={center}\r\n        onLoad={onLoad}  // Call onLoad when the map loads\r\n      >\r\n        <TrafficLayer />\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AAC/E,SAASC,cAAc,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE,iBAAiB;EAAG;EACzBC,GAAG,EAAE,CAAC;AACR,CAAC;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGd,aAAa,CAAC;IAC5Ce,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC;EAChC,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,yBAAyB,CAAC;EAE7EC,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMtB,cAAc,CAACM,MAAM,CAACC,GAAG,EAAED,MAAM,CAACE,GAAG,CAAC;QACzDU,UAAU,CAACI,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDL,UAAU,CAAC;UAAEK,KAAK,EAAE;QAA8B,CAAC,CAAC;MACtD;IACF,CAAC;IAEDF,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,gBAAgB,GAAIC,GAAG,IAAK;IAChC;IACA,MAAMC,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;IAC/C,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,aAAa,CAACK,MAAM,CAAC;IACpE,OAAOL,aAAa,CAACC,WAAW,CAAC;EACnC,CAAC;EAED,MAAMK,MAAM,GAAIP,GAAG,IAAK;IACtB;IACA,MAAMQ,MAAM,GAAGT,gBAAgB,CAACC,GAAG,CAAC;IACpCN,gBAAgB,CAAC,YAAYc,MAAM,EAAE,CAAC;EACxC,CAAC;EAED,IAAItB,SAAS,EAAE,oBAAOV,OAAA;IAAAiC,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACnD,IAAI,CAAC5B,QAAQ,EAAE,oBAAOT,OAAA;IAAAiC,QAAA,EAAK;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEhD,oBACErC,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAKsC,SAAS,EAAC,SAAS;MAAAL,QAAA,gBACtBjC,OAAA;QAAKsC,SAAS,EAAC,QAAQ;QAAAL,QAAA,gBACrBjC,OAAA;UAAAiC,QAAA,EAAI;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChBrC,OAAA;UAAAiC,QAAA,EACGlB,OAAO,GACJ,GAAGA,OAAO,CAACwB,IAAI,CAACC,IAAI,OAAOzB,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC0B,WAAW,EAAE,GAC3D;QAAyB;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENrC,OAAA;QAAKsC,SAAS,EAAC,QAAQ;QAAAL,QAAA,gBACrBjC,OAAA;UAAAiC,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBrC,OAAA;UAAAiC,QAAA,EAAIhB;QAAa;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENrC,OAAA,CAACL,SAAS;MACRM,iBAAiB,EAAEA,iBAAkB;MACrCyC,IAAI,EAAE,EAAG;MACTtC,MAAM,EAAEA,MAAO;MACf2B,MAAM,EAAEA,MAAO,CAAE;MAAA;MAAAE,QAAA,eAEjBjC,OAAA,CAACH,YAAY;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAnEID,GAAG;EAAA,QACyBX,aAAa;AAAA;AAAA+C,EAAA,GADzCpC,GAAG;AAqET,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}