{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\nimport api from '../../../services/api';\nexport default function useMapData(city, country, user) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [airQuality, setAirQuality] = useState(null);\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const prevSearchRef = useRef('');\n  const updateMarkers = useCallback(data => {\n    const newMarkers = data.map(f => ({\n      id: f.id,\n      position: {\n        lat: typeof f.latitude === 'number' ? f.latitude : parseFloat(f.latitude),\n        lng: typeof f.longitude === 'number' ? f.longitude : parseFloat(f.longitude)\n      },\n      type: f.issue_type || f.issueType,\n      severity: f.severity\n    }));\n    setMarkers(newMarkers);\n  }, []);\n  const fetchFeedbackReports = useCallback(async () => {\n    try {\n      const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\n        headers: user ? {\n          Authorization: `Token ${localStorage.getItem('token')}`\n        } : {}\n      });\n      setFeedbacks(resp.data);\n      updateMarkers(resp.data);\n    } catch (err) {\n      console.error('Error loading feedback:', err);\n      setFeedbacks([]);\n      setMarkers([]);\n    }\n  }, [city, user, updateMarkers]);\n  const fetchData = useCallback(async () => {\n    if (!city && !country) return {\n      center: null,\n      zoom: null\n    };\n    const key = `${city === null || city === void 0 ? void 0 : city.trim().toLowerCase()}|${country === null || country === void 0 ? void 0 : country.trim().toLowerCase()}`;\n    prevSearchRef.current = key; // still update it if you want to use later\n\n    try {\n      const {\n        lat,\n        lon\n      } = await getCityCoordinates(city, country);\n      const weatherData = await getWeatherData(lat, lon);\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\n      setWeather(weatherData);\n      setAirQuality(airQualityData);\n      await fetchFeedbackReports();\n      return {\n        center: {\n          lat,\n          lng: lon\n        },\n        zoom: city ? 13 : 6\n      };\n    } catch (err) {\n      console.error('Map data error:', err);\n      throw err;\n    }\n  }, [city, country, fetchFeedbackReports]);\n  const addFeedback = async newFeedback => {\n    try {\n      const response = await api.post('/api/feedback/', newFeedback, {\n        headers: {\n          Authorization: `Token ${localStorage.getItem('token')}`\n        }\n      });\n      setFeedbacks(prev => [response.data, ...prev]);\n      updateMarkers([response.data, ...feedbacks]);\n    } catch (err) {\n      console.error('Error submitting feedback:', err);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return {\n    weather,\n    airQuality,\n    feedbacks,\n    markers,\n    fetchData,\n    addFeedback\n  };\n}\n_s(useMapData, \"YZzgLv60ln7+MkwlNQMRtkwZEts=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","getCityCoordinates","getWeatherData","getAirQualityData","api","useMapData","city","country","user","_s","weather","setWeather","airQuality","setAirQuality","feedbacks","setFeedbacks","markers","setMarkers","prevSearchRef","updateMarkers","data","newMarkers","map","f","id","position","lat","latitude","parseFloat","lng","longitude","type","issue_type","issueType","severity","fetchFeedbackReports","resp","get","encodeURIComponent","headers","Authorization","localStorage","getItem","err","console","error","fetchData","center","zoom","key","trim","toLowerCase","current","lon","weatherData","airQualityData","catch","addFeedback","newFeedback","response","post","prev"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map/hooks/useMapData.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\r\nimport api from '../../../services/api';\r\n\r\nexport default function useMapData(city, country, user) {\r\n  const [weather, setWeather] = useState(null);\r\n  const [airQuality, setAirQuality] = useState(null);\r\n  const [feedbacks, setFeedbacks] = useState([]);\r\n  const [markers, setMarkers] = useState([]);\r\n  const prevSearchRef = useRef('');\r\n\r\n  const updateMarkers = useCallback(data => {\r\n    const newMarkers = data.map(f => ({\r\n      id: f.id,\r\n      position: {\r\n        lat: typeof f.latitude === 'number' ? f.latitude : parseFloat(f.latitude),\r\n        lng: typeof f.longitude === 'number' ? f.longitude : parseFloat(f.longitude)\r\n      },\r\n      type: f.issue_type || f.issueType,\r\n      severity: f.severity\r\n    }));\r\n    setMarkers(newMarkers);\r\n  }, []);\r\n\r\n  const fetchFeedbackReports = useCallback(async () => {\r\n    try {\r\n      const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\r\n        headers: user ? { Authorization: `Token ${localStorage.getItem('token')}` } : {}\r\n      });\r\n      setFeedbacks(resp.data);\r\n      updateMarkers(resp.data);\r\n    } catch (err) {\r\n      console.error('Error loading feedback:', err);\r\n      setFeedbacks([]);\r\n      setMarkers([]);\r\n    }\r\n  }, [city, user, updateMarkers]);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (!city && !country) return { center: null, zoom: null };\r\n  \r\n    const key = `${city?.trim().toLowerCase()}|${country?.trim().toLowerCase()}`;\r\n    prevSearchRef.current = key; // still update it if you want to use later\r\n  \r\n    try {\r\n      const { lat, lon } = await getCityCoordinates(city, country);\r\n      const weatherData = await getWeatherData(lat, lon);\r\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\r\n  \r\n      setWeather(weatherData);\r\n      setAirQuality(airQualityData);\r\n      await fetchFeedbackReports();\r\n  \r\n      return { center: { lat, lng: lon }, zoom: city ? 13 : 6 };\r\n    } catch (err) {\r\n      console.error('Map data error:', err);\r\n      throw err;\r\n    }\r\n  }, [city, country, fetchFeedbackReports]);\r\n  \r\n\r\n  const addFeedback = async (newFeedback) => {\r\n    try {\r\n      const response = await api.post('/api/feedback/', newFeedback, {\r\n        headers: { Authorization: `Token ${localStorage.getItem('token')}` }\r\n      });\r\n      setFeedbacks(prev => [response.data, ...prev]);\r\n      updateMarkers([response.data, ...feedbacks]);\r\n    } catch (err) {\r\n      console.error('Error submitting feedback:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => { fetchData(); }, [fetchData]);\r\n\r\n  return { weather, airQuality, feedbacks, markers, fetchData, addFeedback };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}