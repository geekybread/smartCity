{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map\\\\MapLoader.js\",\n  _s = $RefreshSig$();\n// src/components/Map/MapLoader.js\nimport React from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer, Polygon, Marker } from '@react-google-maps/api';\nimport { GOOGLE_MAPS_CONFIG } from './configs/maps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapLoader({\n  center,\n  zoom,\n  showTraffic,\n  showZones,\n  showAlerts,\n  accidentZones,\n  selectedZoneId,\n  setSelectedZoneId,\n  alerts,\n  onLoad,\n  onUnmount\n}) {\n  _s();\n  const mapRef = useRef();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: GOOGLE_MAPS_CONFIG.apiKey,\n    libraries: [\n    // spread any existing libs from your config, then add drawing & places\n    ...GOOGLE_MAPS_CONFIG.libraries, 'drawing', 'places']\n  });\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-error\",\n    children: \"Error loading map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-loading\",\n    children: \"Loading Map\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: {\n      width: '100%',\n      height: '100%'\n    },\n    center: center,\n    zoom: zoom,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    options: {\n      disableDefaultUI: false,\n      gestureHandling: 'greedy',\n      zoomControl: true,\n      mapTypeControl: true,\n      streetViewControl: true,\n      fullscreenControl: true,\n      styles: [{\n        featureType: 'poi',\n        elementType: 'labels',\n        stylers: [{\n          visibility: 'off'\n        }]\n      }]\n    },\n    children: [showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }, this), showZones && accidentZones.map(zone => /*#__PURE__*/_jsxDEV(Polygon, {\n      paths: zone.polygon.map(p => ({\n        lat: +p[0],\n        lng: +p[1]\n      })),\n      options: {\n        fillColor: zone.id === selectedZoneId ? 'blue' : 'red',\n        fillOpacity: 0.3,\n        strokeColor: zone.id === selectedZoneId ? 'blue' : 'red',\n        strokeOpacity: 0.8,\n        strokeWeight: zone.id === selectedZoneId ? 3 : 1.5,\n        zIndex: zone.id === selectedZoneId ? 999 : 1\n      },\n      onClick: () => {\n        var _mapRef$current;\n        const bounds = new window.google.maps.LatLngBounds();\n        zone.polygon.forEach(([lat, lng]) => bounds.extend({\n          lat: +lat,\n          lng: +lng\n        }));\n        (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.fitBounds(bounds);\n        setSelectedZoneId(zone.id);\n      }\n    }, zone.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)), showAlerts && alerts.map(a => {\n      const lat = parseFloat(a.latitude);\n      const lng = parseFloat(a.longitude);\n      if (isNaN(lat) || isNaN(lng)) return null;\n      return {\n        id: a.id,\n        position: {\n          lat,\n          lng\n        },\n        title: a.message\n      };\n    }).filter(m => m).map(m => /*#__PURE__*/_jsxDEV(Marker, {\n      position: m.position,\n      title: m.title,\n      icon: \"https://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n    }, m.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MapLoader, \"0U9iIPl4tWGQZWHd3K+wGfjXyIc=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapLoader;\nvar _c;\n$RefreshReg$(_c, \"MapLoader\");","map":{"version":3,"names":["React","GoogleMap","useLoadScript","TrafficLayer","Polygon","Marker","GOOGLE_MAPS_CONFIG","jsxDEV","_jsxDEV","MapLoader","center","zoom","showTraffic","showZones","showAlerts","accidentZones","selectedZoneId","setSelectedZoneId","alerts","onLoad","onUnmount","_s","mapRef","useRef","isLoaded","loadError","googleMapsApiKey","apiKey","libraries","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","width","height","options","disableDefaultUI","gestureHandling","zoomControl","mapTypeControl","streetViewControl","fullscreenControl","styles","featureType","elementType","stylers","visibility","map","zone","paths","polygon","p","lat","lng","fillColor","id","fillOpacity","strokeColor","strokeOpacity","strokeWeight","zIndex","onClick","_mapRef$current","bounds","window","google","maps","LatLngBounds","forEach","extend","current","fitBounds","a","parseFloat","latitude","longitude","isNaN","position","title","message","filter","m","icon","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map/MapLoader.js"],"sourcesContent":["// src/components/Map/MapLoader.js\r\nimport React from 'react'\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  TrafficLayer,\r\n  Polygon,\r\n  Marker\r\n} from '@react-google-maps/api'\r\nimport { GOOGLE_MAPS_CONFIG } from './configs/maps'\r\n\r\n\r\nexport default function MapLoader({\r\n  center,\r\n  zoom,\r\n  showTraffic,\r\n  showZones,\r\n  showAlerts,\r\n  accidentZones,\r\n  selectedZoneId,\r\n  setSelectedZoneId,\r\n  alerts,\r\n  onLoad,\r\n  onUnmount\r\n}) {\r\n\r\n  const mapRef = useRef();\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: GOOGLE_MAPS_CONFIG.apiKey,\r\n    libraries: [\r\n      // spread any existing libs from your config, then add drawing & places\r\n      ...GOOGLE_MAPS_CONFIG.libraries,\r\n      'drawing',\r\n      'places'\r\n    ]\r\n  })\r\n\r\n  if (loadError) return <div className=\"map-error\">Error loading map</div>\r\n  if (!isLoaded) return <div className=\"map-loading\">Loading Mapâ€¦</div>\r\n\r\n  return (\r\n    <GoogleMap\r\n      mapContainerStyle={{ width: '100%', height: '100%' }}\r\n      center={center}\r\n      zoom={zoom}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n      options={{\r\n        disableDefaultUI: false,\r\n        gestureHandling: 'greedy',\r\n        zoomControl: true,\r\n        mapTypeControl: true,\r\n        streetViewControl: true,\r\n        fullscreenControl: true,\r\n        styles: [\r\n          { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] }\r\n        ]\r\n      }}\r\n    >\r\n      {showTraffic && <TrafficLayer />}\r\n\r\n      {showZones &&\r\n        accidentZones.map(zone => (\r\n          <Polygon\r\n            key={zone.id}\r\n            paths={zone.polygon.map(p => ({ lat: +p[0], lng: +p[1] }))}\r\n            options={{\r\n              fillColor: zone.id === selectedZoneId ? 'blue' : 'red',\r\n              fillOpacity: 0.3,\r\n              strokeColor: zone.id === selectedZoneId ? 'blue' : 'red',\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: zone.id === selectedZoneId ? 3 : 1.5,\r\n              zIndex: zone.id === selectedZoneId ? 999 : 1,\r\n            }}\r\n            onClick={() => {\r\n              const bounds = new window.google.maps.LatLngBounds();\r\n              zone.polygon.forEach(([lat, lng]) => bounds.extend({ lat: +lat, lng: +lng }));\r\n              mapRef.current?.fitBounds(bounds);\r\n              setSelectedZoneId(zone.id);\r\n            }}\r\n          />\r\n        ))}\r\n\r\n\r\n      {showAlerts &&\r\n        alerts\r\n          .map(a => {\r\n            const lat = parseFloat(a.latitude)\r\n            const lng = parseFloat(a.longitude)\r\n            if (isNaN(lat) || isNaN(lng)) return null\r\n            return { id: a.id, position: { lat, lng }, title: a.message }\r\n          })\r\n          .filter(m => m)\r\n          .map(m => (\r\n            <Marker\r\n              key={m.id}\r\n              position={m.position}\r\n              title={m.title}\r\n              icon=\"https://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\r\n            />\r\n          ))}\r\n    </GoogleMap>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}