{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch weather data\nexport const getWeatherData = async (lat, lon) => {\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n  return response.data;\n};\n\n// Fetch city coordinates\nexport const getCityCoordinates = async (city, country = '') => {\n  try {\n    if (!city) throw new Error('CITY_REQUIRED');\n\n    // Only search within specified country\n    if (country) {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${encodeURIComponent(country)}&limit=1&appid=${API_KEY}`);\n      const data = await response.json();\n\n      // Check if we found an exact match\n      const exactMatch = data.find(item => item.name.toLowerCase() === city.toLowerCase() && item.country.toLowerCase() === country.toLowerCase());\n      if (exactMatch) {\n        return {\n          lat: exactMatch.lat,\n          lon: exactMatch.lon\n        };\n      }\n      throw new Error('CITY_NOT_IN_COUNTRY');\n    }\n\n    // If no country specified, search globally\n    const globalResponse = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${API_KEY}`);\n    const globalData = await globalResponse.json();\n    if (!globalData.length) {\n      throw new Error('CITY_NOT_FOUND');\n    }\n    return {\n      lat: globalData[0].lat,\n      lon: globalData[0].lon\n    };\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getWeatherData","lat","lon","response","get","data","getCityCoordinates","city","country","Error","fetch","encodeURIComponent","json","exactMatch","find","item","name","toLowerCase","globalResponse","globalData","length","error","console"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch weather data\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n  return response.data;\r\n};\r\n\r\n// Fetch city coordinates\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  try {\r\n    if (!city) throw new Error('CITY_REQUIRED');\r\n    \r\n    // Only search within specified country\r\n    if (country) {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${encodeURIComponent(country)}&limit=1&appid=${API_KEY}`\r\n      );\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Check if we found an exact match\r\n      const exactMatch = data.find(item => \r\n        item.name.toLowerCase() === city.toLowerCase() && \r\n        item.country.toLowerCase() === country.toLowerCase()\r\n      );\r\n      \r\n      if (exactMatch) {\r\n        return {\r\n          lat: exactMatch.lat,\r\n          lon: exactMatch.lon\r\n        };\r\n      }\r\n      \r\n      throw new Error('CITY_NOT_IN_COUNTRY');\r\n    }\r\n    \r\n    // If no country specified, search globally\r\n    const globalResponse = await fetch(\r\n      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${API_KEY}`\r\n    );\r\n    \r\n    const globalData = await globalResponse.json();\r\n    \r\n    if (!globalData.length) {\r\n      throw new Error('CITY_NOT_FOUND');\r\n    }\r\n    \r\n    return {\r\n      lat: globalData[0].lat,\r\n      lon: globalData[0].lon\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;;AAE1D;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,QAAQ,gBAAgBE,GAAG,QAAQC,GAAG,UAAUJ,OAAO,eAAe,CAAC;EAC3G,OAAOK,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,GAAG,EAAE,KAAK;EAC9D,IAAI;IACF,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;;IAE3C;IACA,IAAID,OAAO,EAAE;MACX,MAAML,QAAQ,GAAG,MAAMO,KAAK,CAC1B,mDAAmDC,kBAAkB,CAACJ,IAAI,CAAC,IAAII,kBAAkB,CAACH,OAAO,CAAC,kBAAkBV,OAAO,EACrI,CAAC;MAED,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACS,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,UAAU,GAAGR,IAAI,CAACS,IAAI,CAACC,IAAI,IAC/BA,IAAI,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKV,IAAI,CAACU,WAAW,CAAC,CAAC,IAC9CF,IAAI,CAACP,OAAO,CAACS,WAAW,CAAC,CAAC,KAAKT,OAAO,CAACS,WAAW,CAAC,CACrD,CAAC;MAED,IAAIJ,UAAU,EAAE;QACd,OAAO;UACLZ,GAAG,EAAEY,UAAU,CAACZ,GAAG;UACnBC,GAAG,EAAEW,UAAU,CAACX;QAClB,CAAC;MACH;MAEA,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;IACxC;;IAEA;IACA,MAAMS,cAAc,GAAG,MAAMR,KAAK,CAChC,mDAAmDC,kBAAkB,CAACJ,IAAI,CAAC,kBAAkBT,OAAO,EACtG,CAAC;IAED,MAAMqB,UAAU,GAAG,MAAMD,cAAc,CAACN,IAAI,CAAC,CAAC;IAE9C,IAAI,CAACO,UAAU,CAACC,MAAM,EAAE;MACtB,MAAM,IAAIX,KAAK,CAAC,gBAAgB,CAAC;IACnC;IAEA,OAAO;MACLR,GAAG,EAAEkB,UAAU,CAAC,CAAC,CAAC,CAAClB,GAAG;MACtBC,GAAG,EAAEiB,UAAU,CAAC,CAAC,CAAC,CAACjB;IACrB,CAAC;EAEH,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}