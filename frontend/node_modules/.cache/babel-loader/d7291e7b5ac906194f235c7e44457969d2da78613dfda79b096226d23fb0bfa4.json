{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie'; // For CSRF tokens\n\nconst refreshToken = async () => {\n  try {\n    const response = await axios.post('http://localhost:8000/api/auth/token/refresh/', {\n      refresh: localStorage.getItem('refresh_token')\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.access;\n  } catch (err) {\n    throw new Error('Token refresh failed');\n  }\n};\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  const csrfToken = Cookies.get('csrftoken');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken;\n  }\n  return config;\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2, _error$response2$data;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    const originalRequest = error.config;\n    const token = localStorage.getItem('token');\n\n    // Attempt token refresh if possible\n    if (token && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const newToken = await refreshToken(); // Implement this\n        localStorage.setItem('token', newToken);\n        return api(originalRequest);\n      } catch (refreshError) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n    } else {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n  }\n\n  // Global error handling (e.g., show toast)\n  const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Request failed';\n  console.error('API Error:', errorMessage);\n  return Promise.reject(error);\n});\n\n// Dev-only logging\nif (process.env.NODE_ENV === 'development') {\n  api.interceptors.request.use(request => {\n    console.log('Request:', request);\n    return request;\n  });\n  api.interceptors.response.use(response => {\n    console.log('Response:', response);\n    return response;\n  });\n}\nexport default api;","map":{"version":3,"names":["axios","Cookies","refreshToken","response","post","refresh","localStorage","getItem","headers","data","access","err","Error","api","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","interceptors","request","use","config","token","csrfToken","get","Authorization","error","_error$response","_error$response2","_error$response2$data","status","originalRequest","_retry","newToken","setItem","refreshError","removeItem","window","location","href","errorMessage","message","console","Promise","reject","NODE_ENV","log"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport Cookies from 'js-cookie';  // For CSRF tokens\r\n\r\nconst refreshToken = async () => {\r\n  try {\r\n    const response = await axios.post(\r\n      'http://localhost:8000/api/auth/token/refresh/',\r\n      { refresh: localStorage.getItem('refresh_token') },\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n    return response.data.access;\r\n  } catch (err) {\r\n    throw new Error('Token refresh failed');\r\n  }\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  const csrfToken = Cookies.get('csrftoken');\r\n\r\n  if (token) {\r\n    config.headers.Authorization = `Token ${token}`;\r\n  }\r\n  if (csrfToken) {\r\n    config.headers['X-CSRFToken'] = csrfToken;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (error.response?.status === 401) {\r\n      const originalRequest = error.config;\r\n      const token = localStorage.getItem('token');\r\n\r\n      // Attempt token refresh if possible\r\n      if (token && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        try {\r\n          const newToken = await refreshToken();  // Implement this\r\n          localStorage.setItem('token', newToken);\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          localStorage.removeItem('token');\r\n          window.location.href = '/login';\r\n        }\r\n      } else {\r\n        localStorage.removeItem('token');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n\r\n    // Global error handling (e.g., show toast)\r\n    const errorMessage = error.response?.data?.message || 'Request failed';\r\n    console.error('API Error:', errorMessage);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Dev-only logging\r\nif (process.env.NODE_ENV === 'development') {\r\n  api.interceptors.request.use(request => {\r\n    console.log('Request:', request);\r\n    return request;\r\n  });\r\n  api.interceptors.response.use(response => {\r\n    console.log('Response:', response);\r\n    return response;\r\n  });\r\n}\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}