{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Fetch weather data\nexport const getWeatherData = async (lat, lon) => {\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n  return response.data;\n};\n\n// Fetch city coordinates\nexport const getCityCoordinates = async (city, country = '') => {\n  try {\n    // Case 1: Country only - fetch capital\n    if (!city && country) {\n      const capital = await getCountryCapital(country);\n      return searchCityInCountry(capital, country);\n    }\n\n    // Case 2: City + Country - strict search\n    if (city && country) {\n      return searchCityInCountry(city, country);\n    }\n\n    // Case 3: City only - global search\n    if (city) {\n      const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${API_KEY}`);\n      const data = await response.json();\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\n      return {\n        lat: data[0].lat,\n        lon: data[0].lon\n      };\n    }\n    throw new Error('INVALID_INPUT');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\n\n// Helper function for strict country search\nconst searchCityInCountry = async (city, country) => {\n  const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${encodeURIComponent(country)}&limit=1&appid=${API_KEY}`);\n  const data = await response.json();\n  const found = data.find(item => item.country.toLowerCase() === country.toLowerCase());\n  if (!found) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: found.lat,\n    lon: found.lon\n  };\n};\n\n// New function to get country capital\nexport const getCountryCapital = async country => {\n  const response = await fetch(`https://restcountries.com/v3.1/name/${encodeURIComponent(country)}`);\n  const data = await response.json();\n  if (!data.length || !data[0].capital) {\n    throw new Error('COUNTRY_NOT_FOUND');\n  }\n  return data[0].capital[0];\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getWeatherData","lat","lon","response","get","data","getCityCoordinates","city","country","capital","getCountryCapital","searchCityInCountry","fetch","encodeURIComponent","json","length","Error","error","console","found","find","item","toLowerCase"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'f9293dbeda02be4bda1ce865b2706cb4';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n// Fetch weather data\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const response = await axios.get(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\r\n  return response.data;\r\n};\r\n\r\n// Fetch city coordinates\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  try {\r\n    // Case 1: Country only - fetch capital\r\n    if (!city && country) {\r\n      const capital = await getCountryCapital(country);\r\n      return searchCityInCountry(capital, country);\r\n    }\r\n\r\n    // Case 2: City + Country - strict search\r\n    if (city && country) {\r\n      return searchCityInCountry(city, country);\r\n    }\r\n\r\n    // Case 3: City only - global search\r\n    if (city) {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${API_KEY}`\r\n      );\r\n      const data = await response.json();\r\n      \r\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n      return { lat: data[0].lat, lon: data[0].lon };\r\n    }\r\n\r\n    throw new Error('INVALID_INPUT');\r\n\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function for strict country search\r\nconst searchCityInCountry = async (city, country) => {\r\n  const response = await fetch(\r\n    `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)},${encodeURIComponent(country)}&limit=1&appid=${API_KEY}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  const found = data.find(item => \r\n    item.country.toLowerCase() === country.toLowerCase()\r\n  );\r\n  \r\n  if (!found) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: found.lat, lon: found.lon };\r\n};\r\n\r\n// New function to get country capital\r\nexport const getCountryCapital = async (country) => {\r\n  const response = await fetch(\r\n    `https://restcountries.com/v3.1/name/${encodeURIComponent(country)}`\r\n  );\r\n  const data = await response.json();\r\n  \r\n  if (!data.length || !data[0].capital) {\r\n    throw new Error('COUNTRY_NOT_FOUND');\r\n  }\r\n  \r\n  return data[0].capital[0];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}