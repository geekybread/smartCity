{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  city,\n  country,\n  onError\n}) => {\n  _s();\n  var _weather$main, _weather$weather, _weather$weather$;\n  // State declarations\n  const [weather, setWeather] = useState({\n    main: {\n      temp: 'N/A'\n    },\n    weather: [{\n      description: 'N/A'\n    }]\n  });\n  const [center, setCenter] = useState({\n    lat: 34.04924594193164,\n    lng: -118.24104309082031\n  });\n  const [map, setMap] = useState(null);\n  const [showTraffic, setShowTraffic] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Google Maps script loading\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n\n  // Fetch city coordinates and weather data\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        setIsLoading(true);\n        setWeather({\n          main: {\n            temp: 'N/A'\n          },\n          weather: [{\n            description: 'Loading...'\n          }]\n        });\n        const {\n          lat,\n          lon\n        } = await getCityCoordinates(city, country);\n        setCenter({\n          lat,\n          lng: lon\n        });\n        const weatherData = await getWeatherData(lat, lon);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error('Location error:', error);\n        let message;\n        switch (error.message) {\n          case 'CITY_NOT_IN_COUNTRY':\n            message = `${city} not found in ${country}`;\n            break;\n          case 'COUNTRY_NOT_FOUND':\n            message = `${country} not found`;\n            break;\n          case 'CITY_NOT_FOUND':\n            message = `${city} not found globally`;\n            break;\n          case 'INVALID_INPUT':\n            message = 'Please enter a city or country';\n            break;\n          default:\n            message = 'Location service error';\n        }\n        if (onError) onError({\n          type: 'error',\n          message\n        });\n        setWeather({\n          error: true,\n          main: {\n            temp: 'N/A'\n          },\n          weather: [{\n            description: 'Data unavailable'\n          }]\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const timer = setTimeout(fetchCityData, 500);\n    return () => clearTimeout(timer);\n  }, [city, country, onError]);\n\n  // Handle map load\n  const onLoad = useCallback(map => {\n    setMap(map);\n  }, []);\n\n  // Handle errors and loading states\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-message\",\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        },\n        zoom: 13,\n        center: center,\n        onLoad: onLoad,\n        options: {\n          disableDefaultUI: true,\n          zoomControl: true\n        },\n        children: showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowTraffic(!showTraffic),\n        className: \"traffic-toggle\",\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this) : showTraffic ? 'Hide Traffic' : 'Show Traffic'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"temperature\",\n          children: [((_weather$main = weather.main) === null || _weather$main === void 0 ? void 0 : _weather$main.temp) || 'N/A', \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"description\",\n          children: ((_weather$weather = weather.weather) === null || _weather$weather === void 0 ? void 0 : (_weather$weather$ = _weather$weather[0]) === null || _weather$weather$ === void 0 ? void 0 : _weather$weather$.description) || 'Data unavailable'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"r8390R1ZBEaQvAhO8A0WqxtKUa8=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","getCityCoordinates","jsxDEV","_jsxDEV","Fragment","_Fragment","Map","city","country","onError","_s","_weather$main","_weather$weather","_weather$weather$","weather","setWeather","main","temp","description","center","setCenter","lat","lng","map","setMap","showTraffic","setShowTraffic","isLoading","setIsLoading","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","fetchCityData","lon","weatherData","error","console","message","type","timer","setTimeout","clearTimeout","onLoad","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","width","height","zoom","options","disableDefaultUI","zoomControl","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\r\nimport './Map.css';\r\n\r\nconst Map = ({ city, country, onError }) => {\r\n  // State declarations\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 'N/A' },\r\n    weather: [{ description: 'N/A' }],\r\n  });\r\n  const [center, setCenter] = useState({\r\n    lat: 34.04924594193164,\r\n    lng: -118.24104309082031,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n  const [showTraffic, setShowTraffic] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Google Maps script loading\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  // Fetch city coordinates and weather data\r\n  useEffect(() => {\r\n    const fetchCityData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setWeather({ main: { temp: 'N/A' }, weather: [{ description: 'Loading...' }] });\r\n  \r\n        const { lat, lon } = await getCityCoordinates(city, country);\r\n        setCenter({ lat, lng: lon });\r\n        \r\n        const weatherData = await getWeatherData(lat, lon);\r\n        setWeather(weatherData);\r\n  \r\n      } catch (error) {\r\n        console.error('Location error:', error);\r\n        \r\n        let message;\r\n        switch(error.message) {\r\n          case 'CITY_NOT_IN_COUNTRY':\r\n            message = `${city} not found in ${country}`;\r\n            break;\r\n          case 'COUNTRY_NOT_FOUND':\r\n            message = `${country} not found`;\r\n            break;\r\n          case 'CITY_NOT_FOUND':\r\n            message = `${city} not found globally`;\r\n            break;\r\n          case 'INVALID_INPUT':\r\n            message = 'Please enter a city or country';\r\n            break;\r\n          default:\r\n            message = 'Location service error';\r\n        }\r\n  \r\n        if (onError) onError({ type: 'error', message });\r\n        \r\n        setWeather({\r\n          error: true,\r\n          main: { temp: 'N/A' },\r\n          weather: [{ description: 'Data unavailable' }]\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n  \r\n    const timer = setTimeout(fetchCityData, 500);\r\n    return () => clearTimeout(timer);\r\n  }, [city, country, onError]);\r\n\r\n  // Handle map load\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Handle errors and loading states\r\n  if (loadError) return <div className=\"error-message\">Error loading maps</div>;\r\n  if (!isLoaded) return <div className=\"loading-message\">Loading Maps...</div>;\r\n\r\n  return (\r\n    <div className=\"map-page-container\">\r\n      {/* Map Container (Left Side) */}\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          mapContainerStyle={{ width: '100%', height: '100%' }}\r\n          zoom={13}\r\n          center={center}\r\n          onLoad={onLoad}\r\n          options={{\r\n            disableDefaultUI: true,\r\n            zoomControl: true,\r\n          }}\r\n        >\r\n          {showTraffic && <TrafficLayer />}\r\n        </GoogleMap>\r\n        \r\n        {/* Traffic Toggle Button */}\r\n        <button\r\n          onClick={() => setShowTraffic(!showTraffic)}\r\n          className=\"traffic-toggle\"\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? (\r\n            <span className=\"loading-spinner\"></span>\r\n          ) : (\r\n            showTraffic ? 'Hide Traffic' : 'Show Traffic'\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Weather Widget (Right Side) */}\r\n      <div className=\"weather-widget\">\r\n        <h2>Weather</h2>\r\n        {isLoading ? (\r\n          <div className=\"weather-loading\">Loading...</div>\r\n        ) : (\r\n          <>\r\n            <p className=\"temperature\">\r\n              {weather.main?.temp || 'N/A'}°C\r\n            </p>\r\n            <p className=\"description\">\r\n              {weather.weather?.[0]?.description || 'Data unavailable'}\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,SAAS,EAAEC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AAC/E,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,qBAAqB;AACxE,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,aAAA,EAAAC,gBAAA,EAAAC,iBAAA;EAC1C;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC;IACrCsB,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAM,CAAC;IACrBH,OAAO,EAAE,CAAC;MAAEI,WAAW,EAAE;IAAM,CAAC;EAClC,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC;IACnC2B,GAAG,EAAE,iBAAiB;IACtBC,GAAG,EAAE,CAAC;EACR,CAAC,CAAC;EACF,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM;IAAEmC,QAAQ;IAAEC;EAAU,CAAC,GAAGhC,aAAa,CAAC;IAC5CiC,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC;EAChC,CAAC,CAAC;;EAEF;EACAvC,SAAS,CAAC,MAAM;IACd,MAAMwC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFP,YAAY,CAAC,IAAI,CAAC;QAClBb,UAAU,CAAC;UAAEC,IAAI,EAAE;YAAEC,IAAI,EAAE;UAAM,CAAC;UAAEH,OAAO,EAAE,CAAC;YAAEI,WAAW,EAAE;UAAa,CAAC;QAAE,CAAC,CAAC;QAE/E,MAAM;UAAEG,GAAG;UAAEe;QAAI,CAAC,GAAG,MAAMnC,kBAAkB,CAACM,IAAI,EAAEC,OAAO,CAAC;QAC5DY,SAAS,CAAC;UAAEC,GAAG;UAAEC,GAAG,EAAEc;QAAI,CAAC,CAAC;QAE5B,MAAMC,WAAW,GAAG,MAAMrC,cAAc,CAACqB,GAAG,EAAEe,GAAG,CAAC;QAClDrB,UAAU,CAACsB,WAAW,CAAC;MAEzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QAEvC,IAAIE,OAAO;QACX,QAAOF,KAAK,CAACE,OAAO;UAClB,KAAK,qBAAqB;YACxBA,OAAO,GAAG,GAAGjC,IAAI,iBAAiBC,OAAO,EAAE;YAC3C;UACF,KAAK,mBAAmB;YACtBgC,OAAO,GAAG,GAAGhC,OAAO,YAAY;YAChC;UACF,KAAK,gBAAgB;YACnBgC,OAAO,GAAG,GAAGjC,IAAI,qBAAqB;YACtC;UACF,KAAK,eAAe;YAClBiC,OAAO,GAAG,gCAAgC;YAC1C;UACF;YACEA,OAAO,GAAG,wBAAwB;QACtC;QAEA,IAAI/B,OAAO,EAAEA,OAAO,CAAC;UAAEgC,IAAI,EAAE,OAAO;UAAED;QAAQ,CAAC,CAAC;QAEhDzB,UAAU,CAAC;UACTuB,KAAK,EAAE,IAAI;UACXtB,IAAI,EAAE;YAAEC,IAAI,EAAE;UAAM,CAAC;UACrBH,OAAO,EAAE,CAAC;YAAEI,WAAW,EAAE;UAAmB,CAAC;QAC/C,CAAC,CAAC;MACJ,CAAC,SAAS;QACRU,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED,MAAMc,KAAK,GAAGC,UAAU,CAACR,aAAa,EAAE,GAAG,CAAC;IAC5C,OAAO,MAAMS,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,CAACnC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;;EAE5B;EACA,MAAMoC,MAAM,GAAGjD,WAAW,CAAE2B,GAAG,IAAK;IAClCC,MAAM,CAACD,GAAG,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIO,SAAS,EAAE,oBAAO3B,OAAA;IAAK2C,SAAS,EAAC,eAAe;IAAAC,QAAA,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC7E,IAAI,CAACtB,QAAQ,EAAE,oBAAO1B,OAAA;IAAK2C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE5E,oBACEhD,OAAA;IAAK2C,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAEjC5C,OAAA;MAAK2C,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B5C,OAAA,CAACN,SAAS;QACRuD,iBAAiB,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO,CAAE;QACrDC,IAAI,EAAE,EAAG;QACTpC,MAAM,EAAEA,MAAO;QACf0B,MAAM,EAAEA,MAAO;QACfW,OAAO,EAAE;UACPC,gBAAgB,EAAE,IAAI;UACtBC,WAAW,EAAE;QACf,CAAE;QAAAX,QAAA,EAEDtB,WAAW,iBAAItB,OAAA,CAACJ,YAAY;UAAAiD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eAGZhD,OAAA;QACEwD,OAAO,EAAEA,CAAA,KAAMjC,cAAc,CAAC,CAACD,WAAW,CAAE;QAC5CqB,SAAS,EAAC,gBAAgB;QAC1Bc,QAAQ,EAAEjC,SAAU;QAAAoB,QAAA,EAEnBpB,SAAS,gBACRxB,OAAA;UAAM2C,SAAS,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,GAEzC1B,WAAW,GAAG,cAAc,GAAG;MAChC;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGNhD,OAAA;MAAK2C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B5C,OAAA;QAAA4C,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACfxB,SAAS,gBACRxB,OAAA;QAAK2C,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAEjDhD,OAAA,CAAAE,SAAA;QAAA0C,QAAA,gBACE5C,OAAA;UAAG2C,SAAS,EAAC,aAAa;UAAAC,QAAA,GACvB,EAAApC,aAAA,GAAAG,OAAO,CAACE,IAAI,cAAAL,aAAA,uBAAZA,aAAA,CAAcM,IAAI,KAAI,KAAK,EAAC,OAC/B;QAAA;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJhD,OAAA;UAAG2C,SAAS,EAAC,aAAa;UAAAC,QAAA,EACvB,EAAAnC,gBAAA,GAAAE,OAAO,CAACA,OAAO,cAAAF,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,uBAApBA,iBAAA,CAAsBK,WAAW,KAAI;QAAkB;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA,eACJ,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzC,EAAA,CA/HIJ,GAAG;EAAA,QAeyBR,aAAa;AAAA;AAAA+D,EAAA,GAfzCvD,GAAG;AAiIT,eAAeA,GAAG;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}