{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\AccidentZone\\\\ZoneEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GoogleMap, useLoadScript, DrawingManager, Polygon } from '@react-google-maps/api';\nimport api from '../../services/api'; // your axios/fetch wrapper\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ZoneEditor({\n  city\n}) {\n  _s();\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries: ['drawing']\n  });\n  const mapRef = useRef();\n  const [zones, setZones] = useState([]);\n\n  // 5.1 Load existing zones\n  useEffect(() => {\n    api.get(`/api/accident-zones/?city=${city}`).then(res => setZones(res.data));\n  }, [city]);\n\n  // 5.2 Save handler (create or update)\n  const saveZone = (zoneId, path) => {\n    const payload = {\n      city,\n      name: prompt('Zone name:') || 'Unnamed zone',\n      polygon: path.map(pt => [pt.lat(), pt.lng()])\n    };\n    if (zoneId) {\n      return api.put(`/api/accident-zones/${zoneId}/`, payload);\n    } else {\n      return api.post(`/api/accident-zones/`, payload);\n    }\n  };\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading map\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: {\n      width: '100%',\n      height: '80vh'\n    },\n    center: {\n      lat: 28.6139,\n      lng: 77.2090\n    },\n    zoom: 12,\n    onLoad: map => mapRef.current = map,\n    children: [zones.map(z => /*#__PURE__*/_jsxDEV(Polygon, {\n      paths: z.polygon,\n      editable: true,\n      onMouseUp: e => {\n        // grab updated coords\n        const poly = e.domEvent.srcElement;\n        const path = poly.getPath();\n        saveZone(z.id, path);\n      }\n    }, z.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(DrawingManager, {\n      drawingMode: null,\n      onPolygonComplete: poly => {\n        saveZone(null, poly.getPath()).then(() => {\n          // reload after create\n          return api.get(`/api/accident-zones/?city=${city}`);\n        }).then(res => setZones(res.data));\n        poly.setMap(null); // clean up temp\n      },\n      options: {\n        drawingControl: true,\n        drawingControlOptions: {\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: ['polygon']\n        },\n        polygonOptions: {\n          editable: true\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ZoneEditor, \"Rb2qhrKiqoqiw0kmLk2dYTKUo/Q=\", false, function () {\n  return [useLoadScript];\n});\n_c = ZoneEditor;\nvar _c;\n$RefreshReg$(_c, \"ZoneEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMap","useLoadScript","DrawingManager","Polygon","api","jsxDEV","_jsxDEV","ZoneEditor","city","_s","isLoaded","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","libraries","mapRef","zones","setZones","get","then","res","data","saveZone","zoneId","path","payload","name","prompt","polygon","map","pt","lat","lng","put","post","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","width","height","center","zoom","onLoad","current","z","paths","editable","onMouseUp","e","poly","domEvent","srcElement","getPath","id","drawingMode","onPolygonComplete","setMap","options","drawingControl","drawingControlOptions","position","window","google","maps","ControlPosition","TOP_CENTER","drawingModes","polygonOptions","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/AccidentZone/ZoneEditor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  DrawingManager,\r\n  Polygon\r\n} from '@react-google-maps/api';\r\nimport api from '../../services/api'; // your axios/fetch wrapper\r\n\r\nexport default function ZoneEditor({ city }) {\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries: ['drawing']\r\n  });\r\n  const mapRef = useRef();\r\n  const [zones, setZones] = useState([]);\r\n\r\n  // 5.1 Load existing zones\r\n  useEffect(() => {\r\n    api.get(`/api/accident-zones/?city=${city}`)\r\n       .then(res => setZones(res.data));\r\n  }, [city]);\r\n\r\n  // 5.2 Save handler (create or update)\r\n  const saveZone = (zoneId, path) => {\r\n    const payload = {\r\n      city,\r\n      name: prompt('Zone name:') || 'Unnamed zone',\r\n      polygon: path.map(pt => [pt.lat(), pt.lng()])\r\n    };\r\n    if (zoneId) {\r\n      return api.put(`/api/accident-zones/${zoneId}/`, payload);\r\n    } else {\r\n      return api.post(`/api/accident-zones/`, payload);\r\n    }\r\n  };\r\n\r\n  if (!isLoaded) return <p>Loading mapâ€¦</p>;\r\n\r\n  return (\r\n    <GoogleMap\r\n      mapContainerStyle={{ width: '100%', height: '80vh' }}\r\n      center={{ lat: 28.6139, lng: 77.2090 }}\r\n      zoom={12}\r\n      onLoad={map => (mapRef.current = map)}\r\n    >\r\n      {/* 5.3 Existing polygons (editable) */}\r\n      {zones.map(z => (\r\n        <Polygon\r\n          key={z.id}\r\n          paths={z.polygon}\r\n          editable\r\n          onMouseUp={e => {\r\n            // grab updated coords\r\n            const poly = e.domEvent.srcElement;\r\n            const path = poly.getPath();\r\n            saveZone(z.id, path);\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      {/* 5.4 DrawingManager for new zones */}\r\n      <DrawingManager\r\n        drawingMode={null}\r\n        onPolygonComplete={poly => {\r\n          saveZone(null, poly.getPath())\r\n            .then(() => {\r\n              // reload after create\r\n              return api.get(`/api/accident-zones/?city=${city}`);\r\n            })\r\n            .then(res => setZones(res.data));\r\n          poly.setMap(null); // clean up temp\r\n        }}\r\n        options={{\r\n          drawingControl: true,\r\n          drawingControlOptions: {\r\n            position: window.google.maps.ControlPosition.TOP_CENTER,\r\n            drawingModes: ['polygon']\r\n          },\r\n          polygonOptions: { editable: true }\r\n        }}\r\n      />\r\n    </GoogleMap>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}