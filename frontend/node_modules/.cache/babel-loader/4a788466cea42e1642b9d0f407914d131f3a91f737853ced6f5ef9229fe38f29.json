{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\nconst weatherApi = axios.create({\n  baseURL: 'https://api.openweathermap.org',\n  params: {\n    appid: process.env.REACT_APP_OPENWEATHER_API_KEY\n  },\n  timeout: 10000\n});\nconst countriesApi = axios.create({\n  baseURL: 'https://restcountries.com/v3.1',\n  timeout: 10000\n});\n\n// Request deduplication cache\nconst activeRequests = new Map();\nexport const getCityCoordinates = async (city, country = '') => {\n  const cacheKey = `coords_${city}_${country}`;\n\n  // Return existing promise if request is in progress\n  if (activeRequests.has(cacheKey)) {\n    return activeRequests.get(cacheKey);\n  }\n  try {\n    const requestPromise = (async () => {\n      const countryCode = country ? getCountryCode(country) : '';\n      if (country && !countryCode) {\n        throw new Error('INVALID_COUNTRY');\n      }\n\n      // Country only - get capital\n      if (!city && countryCode) {\n        const capital = await getCountryCapital(countryCode);\n        return searchCityInCountry(capital, countryCode);\n      }\n\n      // City + Country search\n      if (city && countryCode) {\n        return searchCityInCountry(city, countryCode);\n      }\n\n      // City only - global search\n      if (city) {\n        const {\n          data\n        } = await weatherApi.get('/geo/1.0/direct', {\n          params: {\n            q: city,\n            limit: 1\n          }\n        });\n        if (!data.length) throw new Error('CITY_NOT_FOUND');\n        return {\n          lat: data[0].lat,\n          lon: data[0].lon\n        };\n      }\n      throw new Error('INVALID_INPUT');\n    })();\n\n    // Store the promise in active requests\n    activeRequests.set(cacheKey, requestPromise);\n    const result = await requestPromise;\n    return result;\n  } catch (error) {\n    throw error;\n  } finally {\n    // Clean up after request completes\n    activeRequests.delete(cacheKey);\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const {\n    data\n  } = await weatherApi.get('/geo/1.0/direct', {\n    params: {\n      q: `${city},${countryCode}`,\n      limit: 1\n    }\n  });\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async countryCode => {\n  const cacheKey = `capital_${countryCode}`;\n  if (activeRequests.has(cacheKey)) {\n    return activeRequests.get(cacheKey);\n  }\n  try {\n    const requestPromise = countriesApi.get(`/alpha/${countryCode.toLowerCase()}`).then(({\n      data\n    }) => {\n      if (!data.length || !data[0].capital) {\n        throw new Error('COUNTRY_NOT_FOUND');\n      }\n      return data[0].capital[0];\n    });\n    activeRequests.set(cacheKey, requestPromise);\n    return await requestPromise;\n  } finally {\n    activeRequests.delete(cacheKey);\n  }\n};\nexport const getWeatherData = async (lat, lon) => {\n  const cacheKey = `weather_${lat}_${lon}`;\n  if (activeRequests.has(cacheKey)) {\n    return activeRequests.get(cacheKey);\n  }\n  try {\n    const requestPromise = weatherApi.get('/data/2.5/weather', {\n      params: {\n        lat,\n        lon,\n        units: 'metric'\n      }\n    }).then(({\n      data\n    }) => data);\n    activeRequests.set(cacheKey, requestPromise);\n    return await requestPromise;\n  } finally {\n    activeRequests.delete(cacheKey);\n  }\n};","map":{"version":3,"names":["axios","getCountryCode","weatherApi","create","baseURL","params","appid","process","env","REACT_APP_OPENWEATHER_API_KEY","timeout","countriesApi","activeRequests","Map","getCityCoordinates","city","country","cacheKey","has","get","requestPromise","countryCode","Error","capital","getCountryCapital","searchCityInCountry","data","q","limit","length","lat","lon","set","result","error","delete","toLowerCase","then","getWeatherData","units"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\nconst weatherApi = axios.create({\r\n  baseURL: 'https://api.openweathermap.org',\r\n  params: {\r\n    appid: process.env.REACT_APP_OPENWEATHER_API_KEY\r\n  },\r\n  timeout: 10000\r\n});\r\n\r\nconst countriesApi = axios.create({\r\n  baseURL: 'https://restcountries.com/v3.1',\r\n  timeout: 10000\r\n});\r\n\r\n// Request deduplication cache\r\nconst activeRequests = new Map();\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  const cacheKey = `coords_${city}_${country}`;\r\n  \r\n  // Return existing promise if request is in progress\r\n  if (activeRequests.has(cacheKey)) {\r\n    return activeRequests.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const requestPromise = (async () => {\r\n      const countryCode = country ? getCountryCode(country) : '';\r\n      \r\n      if (country && !countryCode) {\r\n        throw new Error('INVALID_COUNTRY');\r\n      }\r\n\r\n      // Country only - get capital\r\n      if (!city && countryCode) {\r\n        const capital = await getCountryCapital(countryCode);\r\n        return searchCityInCountry(capital, countryCode);\r\n      }\r\n\r\n      // City + Country search\r\n      if (city && countryCode) {\r\n        return searchCityInCountry(city, countryCode);\r\n      }\r\n\r\n      // City only - global search\r\n      if (city) {\r\n        const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n          params: { q: city, limit: 1 }\r\n        });\r\n        \r\n        if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n        return { lat: data[0].lat, lon: data[0].lon };\r\n      }\r\n\r\n      throw new Error('INVALID_INPUT');\r\n    })();\r\n\r\n    // Store the promise in active requests\r\n    activeRequests.set(cacheKey, requestPromise);\r\n    const result = await requestPromise;\r\n    return result;\r\n\r\n  } catch (error) {\r\n    throw error;\r\n  } finally {\r\n    // Clean up after request completes\r\n    activeRequests.delete(cacheKey);\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n    params: { q: `${city},${countryCode}`, limit: 1 }\r\n  });\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (countryCode) => {\r\n  const cacheKey = `capital_${countryCode}`;\r\n  if (activeRequests.has(cacheKey)) {\r\n    return activeRequests.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const requestPromise = countriesApi.get(`/alpha/${countryCode.toLowerCase()}`)\r\n      .then(({ data }) => {\r\n        if (!data.length || !data[0].capital) {\r\n          throw new Error('COUNTRY_NOT_FOUND');\r\n        }\r\n        return data[0].capital[0];\r\n      });\r\n\r\n    activeRequests.set(cacheKey, requestPromise);\r\n    return await requestPromise;\r\n  } finally {\r\n    activeRequests.delete(cacheKey);\r\n  }\r\n};\r\n\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const cacheKey = `weather_${lat}_${lon}`;\r\n  if (activeRequests.has(cacheKey)) {\r\n    return activeRequests.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const requestPromise = weatherApi.get('/data/2.5/weather', {\r\n      params: { lat, lon, units: 'metric' }\r\n    }).then(({ data }) => data);\r\n\r\n    activeRequests.set(cacheKey, requestPromise);\r\n    return await requestPromise;\r\n  } finally {\r\n    activeRequests.delete(cacheKey);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}