{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Map from './components/Map';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [location, setLocation] = useState({\n    city: 'New Delhi',\n    country: 'India'\n  });\n  const [searchQuery, setSearchQuery] = useState({\n    city: '',\n    country: ''\n  });\n  const [notification, setNotification] = useState(null);\n  const [lastValidSearch, setLastValidSearch] = useState(null);\n  const prevSearchRef = useRef('');\n\n  // Auto-dismiss notification after 2 seconds\n  useEffect(() => {\n    if (notification) {\n      const timer = setTimeout(() => {\n        setNotification(null);\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [notification]);\n  const handleSearch = async e => {\n    e.preventDefault();\n    try {\n      if (!searchQuery.city && !searchQuery.country) {\n        throw new Error('Please enter a city or country');\n      }\n      const currentSearch = `${searchQuery.city}|${searchQuery.country}`;\n      if (prevSearchRef.current === currentSearch) {\n        return; // Skip if same search\n      }\n      prevSearchRef.current = currentSearch;\n      const newLocation = {\n        city: searchQuery.city.trim(),\n        country: searchQuery.country.trim()\n      };\n      setLocation(newLocation);\n      setLastValidSearch(newLocation);\n      setNotification({\n        type: 'info',\n        message: 'Searching for location...'\n      });\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: error.message\n      });\n    }\n  };\n  const handleMapResult = result => {\n    setNotification({\n      type: result.success ? 'success' : 'error',\n      message: result.message\n    });\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSearchQuery(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const refocusOnLastSearch = () => {\n    if (lastValidSearch) {\n      setLocation({\n        ...lastValidSearch\n      });\n      setNotification({\n        type: 'info',\n        message: 'Refocusing on last search...'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart City Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification-banner ${notification.type}`,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      className: \"search-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-fields\",\n        children: [lastValidSearch && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"refocus-button\",\n          onClick: refocusOnLastSearch,\n          title: \"Refocus on last searched location\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"refocus-icon\",\n            children: \"\\uD83D\\uDCCD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          placeholder: \"City (e.g. Delhi)\",\n          value: searchQuery.city,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"country\",\n          placeholder: \"Country (e.g. India)\",\n          value: searchQuery.country,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map, {\n      city: location.city,\n      country: location.country,\n      onResult: handleMapResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FABZwXoMKb8Ve0GzVOqA+7fN3AQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Map","jsxDEV","_jsxDEV","App","_s","location","setLocation","city","country","searchQuery","setSearchQuery","notification","setNotification","lastValidSearch","setLastValidSearch","prevSearchRef","timer","setTimeout","clearTimeout","handleSearch","e","preventDefault","Error","currentSearch","current","newLocation","trim","type","message","error","handleMapResult","result","success","handleInputChange","name","value","target","prev","refocusOnLastSearch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onClick","title","placeholder","onChange","onResult","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Map from './components/Map';\nimport './App.css';\n\nfunction App() {\n  const [location, setLocation] = useState({\n    city: 'New Delhi',\n    country: 'India'\n  });\n  const [searchQuery, setSearchQuery] = useState({\n    city: '',\n    country: ''\n  });\n  const [notification, setNotification] = useState(null);\n  const [lastValidSearch, setLastValidSearch] = useState(null);\n  const prevSearchRef = useRef('');\n\n  // Auto-dismiss notification after 2 seconds\n  useEffect(() => {\n    if (notification) {\n      const timer = setTimeout(() => {\n        setNotification(null);\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [notification]);\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    try {\n      if (!searchQuery.city && !searchQuery.country) {\n        throw new Error('Please enter a city or country');\n      }\n\n      const currentSearch = `${searchQuery.city}|${searchQuery.country}`;\n      if (prevSearchRef.current === currentSearch) {\n        return; // Skip if same search\n      }\n      prevSearchRef.current = currentSearch;\n\n      const newLocation = {\n        city: searchQuery.city.trim(),\n        country: searchQuery.country.trim()\n      };\n\n      setLocation(newLocation);\n      setLastValidSearch(newLocation);\n\n\n      setNotification({\n        type: 'info',\n        message: 'Searching for location...'\n      });\n\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: error.message\n      });\n    }\n  };\n\n  const handleMapResult = (result) => {\n    setNotification({\n      type: result.success ? 'success' : 'error',\n      message: result.message\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setSearchQuery(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const refocusOnLastSearch = () => {\n    if (lastValidSearch) {\n      setLocation({ ...lastValidSearch });\n      setNotification({\n        type: 'info',\n        message: 'Refocusing on last search...'\n      });\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>Smart City Dashboard</h1>\n\n      {notification && (\n        <div className={`notification-banner ${notification.type}`}>\n          <span>{notification.message}</span>\n        </div>\n      )}\n\n      <form onSubmit={handleSearch} className=\"search-bar\">\n        <div className=\"search-fields\">\n        {lastValidSearch && (\n            <button \n              type=\"button\"\n              className=\"refocus-button\"\n              onClick={refocusOnLastSearch}\n              title=\"Refocus on last searched location\"\n            >\n              <span className=\"refocus-icon\">üìç</span>\n            </button>\n          )}\n          <input\n            type=\"text\"\n            name=\"city\"\n            placeholder=\"City (e.g. Delhi)\"\n            value={searchQuery.city}\n            onChange={handleInputChange}\n          />\n          <input\n            type=\"text\"\n            name=\"country\"\n            placeholder=\"Country (e.g. India)\"\n            value={searchQuery.country}\n            onChange={handleInputChange}\n          />\n          <button type=\"submit\">Search</button>\n        </div>\n      </form>\n\n      <Map \n        city={location.city} \n        country={location.country}\n        onResult={handleMapResult}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}