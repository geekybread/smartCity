{"ast":null,"code":"var _jsxFileName = \"C:\\\\MNNIT\\\\SEM2\\\\programmingLab2\\\\Project\\\\smartcity\\\\smartCity\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  city,\n  country,\n  onError\n}) => {\n  _s();\n  var _weather$main, _weather$weather, _weather$weather$;\n  // State declarations\n  const [weather, setWeather] = useState({\n    main: {\n      temp: 'N/A'\n    },\n    weather: [{\n      description: 'N/A'\n    }]\n  });\n  const [center, setCenter] = useState({\n    lat: 34.04924594193164,\n    lng: -118.24104309082031\n  });\n  const [map, setMap] = useState(null);\n  const [showTraffic, setShowTraffic] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Google Maps script loading\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n\n  // Fetch city coordinates and weather data\n  useEffect(() => {\n    const fetchCityData = async () => {\n      try {\n        setIsLoading(true);\n        if (!city || city.trim() === '') {\n          throw new Error('Please enter a city name');\n        }\n        const result = await getCityCoordinates(city, country);\n\n        // Show appropriate notification if not exact match\n        if (country && !result.foundPrecise && onError) {\n          onError({\n            type: 'info',\n            message: `Showing ${city} in ${result.actualCountry} (not found in ${country})`\n          });\n        }\n        setCenter({\n          lat: result.lat,\n          lng: result.lon\n        });\n        const weatherData = await getWeatherData(result.lat, result.lon);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error('Error fetching city data:', error);\n        if (onError) {\n          let message = 'Failed to load location data';\n          if (error.message.includes('not found')) {\n            message = country ? `\"${city}\" not found in ${country}` : `\"${city}\" not found globally`;\n          } else if (error.message.includes('Please enter')) {\n            message = error.message;\n          }\n          onError({\n            type: 'error',\n            message\n          });\n        }\n        setWeather({\n          error: true,\n          main: {\n            temp: 'N/A'\n          },\n          weather: [{\n            description: 'Data unavailable'\n          }]\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const timer = setTimeout(() => {\n      if (city) fetchCityData();\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [city, country, onError]);\n\n  // Handle map load\n  const onLoad = useCallback(map => {\n    setMap(map);\n  }, []);\n\n  // Handle errors and loading states\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-message\",\n    children: \"Loading Maps...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          width: '100%',\n          height: '100%'\n        },\n        zoom: 13,\n        center: center,\n        onLoad: onLoad,\n        options: {\n          disableDefaultUI: true,\n          zoomControl: true\n        },\n        children: showTraffic && /*#__PURE__*/_jsxDEV(TrafficLayer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowTraffic(!showTraffic),\n        className: \"traffic-toggle\",\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : showTraffic ? 'Hide Traffic' : 'Show Traffic'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-loading\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"temperature\",\n          children: [((_weather$main = weather.main) === null || _weather$main === void 0 ? void 0 : _weather$main.temp) || 'N/A', \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"description\",\n          children: ((_weather$weather = weather.weather) === null || _weather$weather === void 0 ? void 0 : (_weather$weather$ = _weather$weather[0]) === null || _weather$weather$ === void 0 ? void 0 : _weather$weather$.description) || 'Data unavailable'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"r8390R1ZBEaQvAhO8A0WqxtKUa8=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GoogleMap","useLoadScript","TrafficLayer","getWeatherData","getCityCoordinates","jsxDEV","_jsxDEV","Fragment","_Fragment","Map","city","country","onError","_s","_weather$main","_weather$weather","_weather$weather$","weather","setWeather","main","temp","description","center","setCenter","lat","lng","map","setMap","showTraffic","setShowTraffic","isLoading","setIsLoading","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","fetchCityData","trim","Error","result","foundPrecise","type","message","actualCountry","lon","weatherData","error","console","includes","timer","setTimeout","clearTimeout","onLoad","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","width","height","zoom","options","disableDefaultUI","zoomControl","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GoogleMap, useLoadScript, TrafficLayer } from '@react-google-maps/api';\r\nimport { getWeatherData, getCityCoordinates } from '../services/weather';\r\nimport './Map.css';\r\n\r\nconst Map = ({ city, country, onError }) => {\r\n  // State declarations\r\n  const [weather, setWeather] = useState({\r\n    main: { temp: 'N/A' },\r\n    weather: [{ description: 'N/A' }],\r\n  });\r\n  const [center, setCenter] = useState({\r\n    lat: 34.04924594193164,\r\n    lng: -118.24104309082031,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n  const [showTraffic, setShowTraffic] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Google Maps script loading\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n  });\r\n\r\n  // Fetch city coordinates and weather data\r\n  useEffect(() => {\r\n    const fetchCityData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        if (!city || city.trim() === '') {\r\n          throw new Error('Please enter a city name');\r\n        }\r\n\r\n        const result = await getCityCoordinates(city, country);\r\n        \r\n        // Show appropriate notification if not exact match\r\n        if (country && !result.foundPrecise && onError) {\r\n          onError({\r\n            type: 'info',\r\n            message: `Showing ${city} in ${result.actualCountry} (not found in ${country})`\r\n          });\r\n        }\r\n        \r\n        setCenter({ lat: result.lat, lng: result.lon });\r\n        const weatherData = await getWeatherData(result.lat, result.lon);\r\n        setWeather(weatherData);\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching city data:', error);\r\n        \r\n        if (onError) {\r\n          let message = 'Failed to load location data';\r\n          \r\n          if (error.message.includes('not found')) {\r\n            message = country \r\n              ? `\"${city}\" not found in ${country}`\r\n              : `\"${city}\" not found globally`;\r\n          } else if (error.message.includes('Please enter')) {\r\n            message = error.message;\r\n          }\r\n          \r\n          onError({\r\n            type: 'error',\r\n            message\r\n          });\r\n        }\r\n        \r\n        setWeather({\r\n          error: true,\r\n          main: { temp: 'N/A' },\r\n          weather: [{ description: 'Data unavailable' }]\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    const timer = setTimeout(() => {\r\n      if (city) fetchCityData();\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [city, country, onError]);\r\n\r\n  // Handle map load\r\n  const onLoad = useCallback((map) => {\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Handle errors and loading states\r\n  if (loadError) return <div className=\"error-message\">Error loading maps</div>;\r\n  if (!isLoaded) return <div className=\"loading-message\">Loading Maps...</div>;\r\n\r\n  return (\r\n    <div className=\"map-page-container\">\r\n      {/* Map Container (Left Side) */}\r\n      <div className=\"map-container\">\r\n        <GoogleMap\r\n          mapContainerStyle={{ width: '100%', height: '100%' }}\r\n          zoom={13}\r\n          center={center}\r\n          onLoad={onLoad}\r\n          options={{\r\n            disableDefaultUI: true,\r\n            zoomControl: true,\r\n          }}\r\n        >\r\n          {showTraffic && <TrafficLayer />}\r\n        </GoogleMap>\r\n        \r\n        {/* Traffic Toggle Button */}\r\n        <button\r\n          onClick={() => setShowTraffic(!showTraffic)}\r\n          className=\"traffic-toggle\"\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? (\r\n            <span className=\"loading-spinner\"></span>\r\n          ) : (\r\n            showTraffic ? 'Hide Traffic' : 'Show Traffic'\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Weather Widget (Right Side) */}\r\n      <div className=\"weather-widget\">\r\n        <h2>Weather</h2>\r\n        {isLoading ? (\r\n          <div className=\"weather-loading\">Loading...</div>\r\n        ) : (\r\n          <>\r\n            <p className=\"temperature\">\r\n              {weather.main?.temp || 'N/A'}°C\r\n            </p>\r\n            <p className=\"description\">\r\n              {weather.weather?.[0]?.description || 'Data unavailable'}\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}