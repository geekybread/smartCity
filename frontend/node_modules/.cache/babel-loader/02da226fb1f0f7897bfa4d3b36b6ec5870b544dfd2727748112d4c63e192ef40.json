{"ast":null,"code":"import axios from 'axios';\nimport { getCountryCode } from '../utils/countryCodes';\nconst apiKey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || '';\nconsole.log(\"api:\", apiKey);\nif (!apiKey) throw new Error('Missing API key configuration');\nconst weatherApi = axios.create({\n  baseURL: 'https://api.openweathermap.org',\n  params: {\n    appid: apiKey\n  },\n  timeout: 10000\n});\nconst countriesApi = axios.create({\n  baseURL: 'https://restcountries.com/v3.1',\n  timeout: 10000\n});\nconst requestCache = new Map();\nexport const getCityCoordinates = async (city, country = '') => {\n  const cacheKey = `coords_${city}_${country}`;\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n  try {\n    const countryCode = country ? getCountryCode(country) : '';\n    if (country && !countryCode) {\n      throw new Error('INVALID_COUNTRY');\n    }\n    let result;\n    if (!city && countryCode) {\n      const capital = await getCountryCapital(countryCode);\n      result = await searchCityInCountry(capital, countryCode);\n    } else if (city && countryCode) {\n      result = await searchCityInCountry(city, countryCode);\n    } else if (city) {\n      const {\n        data\n      } = await weatherApi.get('/geo/1.0/direct', {\n        params: {\n          q: city,\n          limit: 1\n        }\n      });\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\n      result = {\n        lat: data[0].lat,\n        lon: data[0].lon\n      };\n    } else {\n      throw new Error('INVALID_INPUT');\n    }\n    requestCache.set(cacheKey, result);\n    return result;\n  } catch (error) {\n    requestCache.set(cacheKey, {\n      error: error.message\n    });\n    throw error;\n  }\n};\nconst searchCityInCountry = async (city, countryCode) => {\n  const {\n    data\n  } = await weatherApi.get('/geo/1.0/direct', {\n    params: {\n      q: `${city},${countryCode}`,\n      limit: 1\n    }\n  });\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\n  return {\n    lat: data[0].lat,\n    lon: data[0].lon\n  };\n};\nexport const getCountryCapital = async countryCode => {\n  const {\n    data\n  } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\n  if (!data.length || !data[0].capital) {\n    throw new Error('COUNTRY_NOT_FOUND');\n  }\n  return data[0].capital[0];\n};\nexport const getWeatherData = async (lat, lon) => {\n  const {\n    data\n  } = await weatherApi.get('/data/2.5/weather', {\n    params: {\n      lat,\n      lon,\n      units: 'metric'\n    }\n  });\n  return data;\n};\nexport const getAirQualityData = async (lat, lon) => {\n  try {\n    var _response$data$indexe;\n    const response = await axios.get(`https://airquality.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}`, {\n      params: {\n        location: {\n          latitude: lat,\n          longitude: lon\n        },\n        extraComputations: [\"HEALTH_RECOMMENDATIONS\"],\n        languageCode: \"en\"\n      }\n    });\n    return {\n      aqi: response.data.indexes[0].aqi,\n      dominantPollutant: response.data.indexes[0].code,\n      healthMessage: (_response$data$indexe = response.data.indexes[0].healthRecommendations) === null || _response$data$indexe === void 0 ? void 0 : _response$data$indexe.generalPopulation,\n      pollutants: response.data.pollutants\n    };\n  } catch (error) {\n    console.error(\"Google Air Quality API Error:\", error);\n    throw new Error(\"Failed to fetch air quality data\");\n  }\n};","map":{"version":3,"names":["axios","getCountryCode","apiKey","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","console","log","Error","weatherApi","create","baseURL","params","appid","timeout","countriesApi","requestCache","Map","getCityCoordinates","city","country","cacheKey","has","get","countryCode","result","capital","getCountryCapital","searchCityInCountry","data","q","limit","length","lat","lon","set","error","message","toLowerCase","getWeatherData","units","getAirQualityData","_response$data$indexe","response","GOOGLE_API_KEY","location","latitude","longitude","extraComputations","languageCode","aqi","indexes","dominantPollutant","code","healthMessage","healthRecommendations","generalPopulation","pollutants"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/weather.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getCountryCode } from '../utils/countryCodes';\r\n\r\nconst apiKey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || '';\r\nconsole.log(\"api:\",apiKey)\r\n\r\nif (!apiKey) throw new Error('Missing API key configuration');\r\n\r\n\r\nconst weatherApi = axios.create({\r\n  baseURL: 'https://api.openweathermap.org',\r\n  params: {\r\n    appid: apiKey\r\n  },\r\n  timeout: 10000\r\n});\r\n\r\nconst countriesApi = axios.create({\r\n  baseURL: 'https://restcountries.com/v3.1',\r\n  timeout: 10000\r\n});\r\n\r\nconst requestCache = new Map();\r\n\r\nexport const getCityCoordinates = async (city, country = '') => {\r\n  const cacheKey = `coords_${city}_${country}`;\r\n  \r\n  if (requestCache.has(cacheKey)) {\r\n    return requestCache.get(cacheKey);\r\n  }\r\n\r\n  try {\r\n    const countryCode = country ? getCountryCode(country) : '';\r\n    \r\n    if (country && !countryCode) {\r\n      throw new Error('INVALID_COUNTRY');\r\n    }\r\n\r\n    let result;\r\n    \r\n    if (!city && countryCode) {\r\n      const capital = await getCountryCapital(countryCode);\r\n      result = await searchCityInCountry(capital, countryCode);\r\n    } else if (city && countryCode) {\r\n      result = await searchCityInCountry(city, countryCode);\r\n    } else if (city) {\r\n      const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n        params: { q: city, limit: 1 }\r\n      });\r\n      if (!data.length) throw new Error('CITY_NOT_FOUND');\r\n      result = { lat: data[0].lat, lon: data[0].lon };\r\n    } else {\r\n      throw new Error('INVALID_INPUT');\r\n    }\r\n\r\n    requestCache.set(cacheKey, result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    requestCache.set(cacheKey, { error: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst searchCityInCountry = async (city, countryCode) => {\r\n  const { data } = await weatherApi.get('/geo/1.0/direct', {\r\n    params: { q: `${city},${countryCode}`, limit: 1 }\r\n  });\r\n  \r\n  if (!data.length) throw new Error('CITY_NOT_IN_COUNTRY');\r\n  return { lat: data[0].lat, lon: data[0].lon };\r\n};\r\n\r\nexport const getCountryCapital = async (countryCode) => {\r\n  const { data } = await countriesApi.get(`/alpha/${countryCode.toLowerCase()}`);\r\n  \r\n  if (!data.length || !data[0].capital) {\r\n    throw new Error('COUNTRY_NOT_FOUND');\r\n  }\r\n  \r\n  return data[0].capital[0];\r\n};\r\n\r\nexport const getWeatherData = async (lat, lon) => {\r\n  const { data } = await weatherApi.get('/data/2.5/weather', {\r\n    params: { lat, lon, units: 'metric' }\r\n  });\r\n  return data;\r\n};\r\n\r\nexport const getAirQualityData = async (lat, lon) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://airquality.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}`,\r\n      {\r\n        params: {\r\n          location: {\r\n            latitude: lat,\r\n            longitude: lon\r\n          },\r\n          extraComputations: [\"HEALTH_RECOMMENDATIONS\"],\r\n          languageCode: \"en\"\r\n        }\r\n      }\r\n    );\r\n    \r\n    return {\r\n      aqi: response.data.indexes[0].aqi,\r\n      dominantPollutant: response.data.indexes[0].code,\r\n      healthMessage: response.data.indexes[0].healthRecommendations?.generalPopulation,\r\n      pollutants: response.data.pollutants\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error(\"Google Air Quality API Error:\", error);\r\n    throw new Error(\"Failed to fetch air quality data\");\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,uBAAuB;AAEtD,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,gCAAgC,IAAI,EAAE;AACjEC,OAAO,CAACC,GAAG,CAAC,MAAM,EAACL,MAAM,CAAC;AAE1B,IAAI,CAACA,MAAM,EAAE,MAAM,IAAIM,KAAK,CAAC,+BAA+B,CAAC;AAG7D,MAAMC,UAAU,GAAGT,KAAK,CAACU,MAAM,CAAC;EAC9BC,OAAO,EAAE,gCAAgC;EACzCC,MAAM,EAAE;IACNC,KAAK,EAAEX;EACT,CAAC;EACDY,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAGf,KAAK,CAACU,MAAM,CAAC;EAChCC,OAAO,EAAE,gCAAgC;EACzCG,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAME,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE9B,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,GAAG,EAAE,KAAK;EAC9D,MAAMC,QAAQ,GAAG,UAAUF,IAAI,IAAIC,OAAO,EAAE;EAE5C,IAAIJ,YAAY,CAACM,GAAG,CAACD,QAAQ,CAAC,EAAE;IAC9B,OAAOL,YAAY,CAACO,GAAG,CAACF,QAAQ,CAAC;EACnC;EAEA,IAAI;IACF,MAAMG,WAAW,GAAGJ,OAAO,GAAGnB,cAAc,CAACmB,OAAO,CAAC,GAAG,EAAE;IAE1D,IAAIA,OAAO,IAAI,CAACI,WAAW,EAAE;MAC3B,MAAM,IAAIhB,KAAK,CAAC,iBAAiB,CAAC;IACpC;IAEA,IAAIiB,MAAM;IAEV,IAAI,CAACN,IAAI,IAAIK,WAAW,EAAE;MACxB,MAAME,OAAO,GAAG,MAAMC,iBAAiB,CAACH,WAAW,CAAC;MACpDC,MAAM,GAAG,MAAMG,mBAAmB,CAACF,OAAO,EAAEF,WAAW,CAAC;IAC1D,CAAC,MAAM,IAAIL,IAAI,IAAIK,WAAW,EAAE;MAC9BC,MAAM,GAAG,MAAMG,mBAAmB,CAACT,IAAI,EAAEK,WAAW,CAAC;IACvD,CAAC,MAAM,IAAIL,IAAI,EAAE;MACf,MAAM;QAAEU;MAAK,CAAC,GAAG,MAAMpB,UAAU,CAACc,GAAG,CAAC,iBAAiB,EAAE;QACvDX,MAAM,EAAE;UAAEkB,CAAC,EAAEX,IAAI;UAAEY,KAAK,EAAE;QAAE;MAC9B,CAAC,CAAC;MACF,IAAI,CAACF,IAAI,CAACG,MAAM,EAAE,MAAM,IAAIxB,KAAK,CAAC,gBAAgB,CAAC;MACnDiB,MAAM,GAAG;QAAEQ,GAAG,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAACI,GAAG;QAAEC,GAAG,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK;MAAI,CAAC;IACjD,CAAC,MAAM;MACL,MAAM,IAAI1B,KAAK,CAAC,eAAe,CAAC;IAClC;IAEAQ,YAAY,CAACmB,GAAG,CAACd,QAAQ,EAAEI,MAAM,CAAC;IAClC,OAAOA,MAAM;EAEf,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdpB,YAAY,CAACmB,GAAG,CAACd,QAAQ,EAAE;MAAEe,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC,CAAC;IACpD,MAAMD,KAAK;EACb;AACF,CAAC;AAED,MAAMR,mBAAmB,GAAG,MAAAA,CAAOT,IAAI,EAAEK,WAAW,KAAK;EACvD,MAAM;IAAEK;EAAK,CAAC,GAAG,MAAMpB,UAAU,CAACc,GAAG,CAAC,iBAAiB,EAAE;IACvDX,MAAM,EAAE;MAAEkB,CAAC,EAAE,GAAGX,IAAI,IAAIK,WAAW,EAAE;MAAEO,KAAK,EAAE;IAAE;EAClD,CAAC,CAAC;EAEF,IAAI,CAACF,IAAI,CAACG,MAAM,EAAE,MAAM,IAAIxB,KAAK,CAAC,qBAAqB,CAAC;EACxD,OAAO;IAAEyB,GAAG,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAACI,GAAG;IAAEC,GAAG,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK;EAAI,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMP,iBAAiB,GAAG,MAAOH,WAAW,IAAK;EACtD,MAAM;IAAEK;EAAK,CAAC,GAAG,MAAMd,YAAY,CAACQ,GAAG,CAAC,UAAUC,WAAW,CAACc,WAAW,CAAC,CAAC,EAAE,CAAC;EAE9E,IAAI,CAACT,IAAI,CAACG,MAAM,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,CAACH,OAAO,EAAE;IACpC,MAAM,IAAIlB,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,OAAOqB,IAAI,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC,CAAC,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMa,cAAc,GAAG,MAAAA,CAAON,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEL;EAAK,CAAC,GAAG,MAAMpB,UAAU,CAACc,GAAG,CAAC,mBAAmB,EAAE;IACzDX,MAAM,EAAE;MAAEqB,GAAG;MAAEC,GAAG;MAAEM,KAAK,EAAE;IAAS;EACtC,CAAC,CAAC;EACF,OAAOX,IAAI;AACb,CAAC;AAED,OAAO,MAAMY,iBAAiB,GAAG,MAAAA,CAAOR,GAAG,EAAEC,GAAG,KAAK;EACnD,IAAI;IAAA,IAAAQ,qBAAA;IACF,MAAMC,QAAQ,GAAG,MAAM3C,KAAK,CAACuB,GAAG,CAC9B,qEAAqEqB,cAAc,EAAE,EACrF;MACEhC,MAAM,EAAE;QACNiC,QAAQ,EAAE;UACRC,QAAQ,EAAEb,GAAG;UACbc,SAAS,EAAEb;QACb,CAAC;QACDc,iBAAiB,EAAE,CAAC,wBAAwB,CAAC;QAC7CC,YAAY,EAAE;MAChB;IACF,CACF,CAAC;IAED,OAAO;MACLC,GAAG,EAAEP,QAAQ,CAACd,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACD,GAAG;MACjCE,iBAAiB,EAAET,QAAQ,CAACd,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI;MAChDC,aAAa,GAAAZ,qBAAA,GAAEC,QAAQ,CAACd,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC,CAACI,qBAAqB,cAAAb,qBAAA,uBAA9CA,qBAAA,CAAgDc,iBAAiB;MAChFC,UAAU,EAAEd,QAAQ,CAACd,IAAI,CAAC4B;IAC5B,CAAC;EAEH,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACd9B,OAAO,CAAC8B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAM,IAAI5B,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}