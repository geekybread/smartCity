{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\nimport api from '../../../services/api';\nexport default function useMapData(city, country, user) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [airQuality, setAirQuality] = useState(null);\n  const [feedbacks, setFeedbacks] = useState([]); // All feedback reports\n  const prevSearchRef = useRef('');\n  const fetchData = useCallback(async () => {\n    if (!city && !country) return {\n      center: null,\n      zoom: null\n    };\n    const key = `${city === null || city === void 0 ? void 0 : city.trim().toLowerCase()}|${country === null || country === void 0 ? void 0 : country.trim().toLowerCase()}`;\n    prevSearchRef.current = key;\n    try {\n      const {\n        lat,\n        lon\n      } = await getCityCoordinates(city, country);\n      const weatherData = await getWeatherData(lat, lon);\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\n      setWeather(weatherData);\n      setAirQuality(airQualityData);\n      try {\n        const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\n          headers: user ? {\n            Authorization: `Token ${localStorage.getItem('token')}`\n          } : {}\n        });\n        setFeedbacks(resp.data); // Store all feedbacks\n      } catch (err) {\n        console.error('Feedback fetch failed:', err);\n        setFeedbacks([]);\n      }\n      return {\n        center: {\n          lat,\n          lng: lon\n        },\n        zoom: city ? 13 : 6\n      };\n    } catch (error) {\n      console.error('Map data error:', error);\n      let message;\n      switch (error.message) {\n        case 'CITY_NOT_FOUND':\n          message = `${city} not found${country ? ` in ${country}` : ''}`;\n          break;\n        case 'CITY_NOT_IN_COUNTRY':\n          message = `${city} not found in ${country}`;\n          break;\n        case 'COUNTRY_NOT_FOUND':\n          message = `${country} not found`;\n          break;\n        case 'INVALID_COUNTRY':\n          message = `Invalid country: ${country}`;\n          break;\n        default:\n          message = 'Failed to load location data';\n      }\n      return {\n        error: true,\n        message\n      };\n    }\n  }, [city, country, user]);\n  const addFeedback = async newFeedback => {\n    try {\n      const response = await api.post('/api/feedback/', newFeedback, {\n        headers: {\n          Authorization: `Token ${localStorage.getItem('token')}`\n        }\n      });\n      const newFb = response.data;\n      setFeedbacks(prev => [newFb, ...prev]); // Add to full list\n\n      const newMarker = {\n        id: newFb.id,\n        position: {\n          lat: parseFloat(newFb.latitude),\n          lng: parseFloat(newFb.longitude)\n        },\n        type: newFb.issue_type,\n        severity: newFb.severity\n      };\n    } catch (err) {\n      console.error('Error submitting feedback:', err);\n    }\n  };\n  return {\n    weather,\n    airQuality,\n    feedbacks,\n    fetchData,\n    addFeedback\n  };\n}\n_s(useMapData, \"2MaBuyuvzDNctAu2Z3BQGSv6sYQ=\");","map":{"version":3,"names":["useState","useCallback","useRef","getCityCoordinates","getWeatherData","getAirQualityData","api","useMapData","city","country","user","_s","weather","setWeather","airQuality","setAirQuality","feedbacks","setFeedbacks","prevSearchRef","fetchData","center","zoom","key","trim","toLowerCase","current","lat","lon","weatherData","airQualityData","catch","resp","get","encodeURIComponent","headers","Authorization","localStorage","getItem","data","err","console","error","lng","message","addFeedback","newFeedback","response","post","newFb","prev","newMarker","id","position","parseFloat","latitude","longitude","type","issue_type","severity"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/components/Map/hooks/useMapData.js"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\nimport { getCityCoordinates, getWeatherData, getAirQualityData } from '../../../services/weather';\r\nimport api from '../../../services/api';\r\n\r\nexport default function useMapData(city, country, user) {\r\n  const [weather, setWeather] = useState(null);\r\n  const [airQuality, setAirQuality] = useState(null);\r\n  const [feedbacks, setFeedbacks] = useState([]);  // All feedback reports\r\n  const prevSearchRef = useRef('');\r\n\r\n\r\n  const fetchData = useCallback(async () => {\r\n    if (!city && !country) return { center: null, zoom: null };\r\n\r\n    const key = `${city?.trim().toLowerCase()}|${country?.trim().toLowerCase()}`;\r\n    prevSearchRef.current = key;\r\n\r\n    try {\r\n      const { lat, lon } = await getCityCoordinates(city, country);\r\n      const weatherData = await getWeatherData(lat, lon);\r\n      const airQualityData = await getAirQualityData(lat, lon).catch(() => null);\r\n\r\n      setWeather(weatherData);\r\n      setAirQuality(airQualityData);\r\n\r\n      try {\r\n        const resp = await api.get(`/api/feedback/?city=${encodeURIComponent(city)}`, {\r\n          headers: user ? { Authorization: `Token ${localStorage.getItem('token')}` } : {}\r\n        });\r\n\r\n        setFeedbacks(resp.data);        // Store all feedbacks\r\n\r\n      } catch (err) {\r\n        console.error('Feedback fetch failed:', err);\r\n        setFeedbacks([]);\r\n      }\r\n\r\n      return { center: { lat, lng: lon }, zoom: city ? 13 : 6 };\r\n\r\n    } catch (error) {\r\n      console.error('Map data error:', error);\r\n      let message;\r\n      switch (error.message) {\r\n        case 'CITY_NOT_FOUND':\r\n          message = `${city} not found${country ? ` in ${country}` : ''}`;\r\n          break;\r\n        case 'CITY_NOT_IN_COUNTRY':\r\n          message = `${city} not found in ${country}`;\r\n          break;\r\n        case 'COUNTRY_NOT_FOUND':\r\n          message = `${country} not found`;\r\n          break;\r\n        case 'INVALID_COUNTRY':\r\n          message = `Invalid country: ${country}`;\r\n          break;\r\n        default:\r\n          message = 'Failed to load location data';\r\n      }\r\n      return { error: true, message };\r\n    }\r\n  }, [city, country, user]);\r\n\r\n  const addFeedback = async (newFeedback) => {\r\n    try {\r\n      const response = await api.post('/api/feedback/', newFeedback, {\r\n        headers: { Authorization: `Token ${localStorage.getItem('token')}` }\r\n      });\r\n\r\n      const newFb = response.data;\r\n\r\n      setFeedbacks(prev => [newFb, ...prev]);  // Add to full list\r\n\r\n      const newMarker = {\r\n        id: newFb.id,\r\n        position: {\r\n          lat: parseFloat(newFb.latitude),\r\n          lng: parseFloat(newFb.longitude)\r\n        },\r\n        type: newFb.issue_type,\r\n        severity: newFb.severity\r\n      };\r\n\r\n    } catch (err) {\r\n      console.error('Error submitting feedback:', err);\r\n    }\r\n  };\r\n\r\n  return { weather, airQuality, feedbacks, fetchData, addFeedback };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}