{"ast":null,"code":"// src/services/api.js\n\nimport axios from 'axios';\n\n// Create a single axios instance for the app\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // send cookies (if you ever need CSRF/session)\n});\n\n// Attach the token on every request if present\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n});\n\n// Global response handler \napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  // If unauthorized, clear token and reload to kick user to login\n  if (status === 401 || status === 403) {\n    localStorage.removeItem('token');\n    // optional: redirect or reload\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","reload","Promise","reject"],"sources":["C:/MNNIT/SEM2/programmingLab2/Project/smartcity/smartCity/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n\r\nimport axios from 'axios'\r\n\r\n// Create a single axios instance for the app\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // send cookies (if you ever need CSRF/session)\r\n})\r\n\r\n// Attach the token on every request if present\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token')\r\n  if (token) {\r\n    config.headers.Authorization = `Token ${token}`\r\n  }\r\n  return config\r\n})\r\n\r\n// Global response handler \r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    const status = error.response?.status\r\n    // If unauthorized, clear token and reload to kick user to login\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem('token')\r\n      // optional: redirect or reload\r\n      window.location.reload()\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default api\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;EACtEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAR,GAAG,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,SAASH,KAAK,EAAE;EACjD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAZ,GAAG,CAACS,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC3BM,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACP,MAAMC,MAAM,IAAAD,eAAA,GAAGD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM;EACrC;EACA,IAAIA,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;IACpCN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChC;IACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}